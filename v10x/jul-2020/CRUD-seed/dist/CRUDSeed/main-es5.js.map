{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.component.ts","webpack:///src/app/app.module.ts","webpack:///src/app/routes/http-error/http-error.component.html","webpack:///src/app/routes/http-error/http-error.component.ts","webpack:///src/app/routes/http-error/http-error.module.ts","webpack:///src/app/routes/http-error/slice/actions.ts","webpack:///src/app/routes/http-error/slice/http-error-slice.module.ts","webpack:///src/app/routes/http-error/slice/reducer.ts","webpack:///src/app/routes/http-error/slice/selectors.ts","webpack:///src/app/routes/http-error/slice/state.ts","webpack:///src/app/routes/login/login-form/login-form.component.html","webpack:///src/app/routes/login/login-form/login-form.component.ts","webpack:///src/app/routes/login/login-form/login-form.module.ts","webpack:///src/app/routes/login/login-form/login-form.service.ts","webpack:///src/app/routes/login/login-form/slice/actions.ts","webpack:///src/app/routes/login/login-form/slice/login-form-slice.module.ts","webpack:///src/app/routes/login/login-form/slice/reducer.ts","webpack:///src/app/routes/login/login-form/slice/selectors.ts","webpack:///src/app/routes/login/login-form/slice/state.ts","webpack:///src/app/routes/login/login.component.html","webpack:///src/app/routes/login/login.component.ts","webpack:///src/app/routes/login/login.fake.ts","webpack:///src/app/routes/login/login.module.ts","webpack:///src/app/routes/login/login.service.ts","webpack:///src/app/routes/login/slice/actions.ts","webpack:///src/app/routes/login/slice/effects.ts","webpack:///src/app/routes/login/slice/login-slice.module.ts","webpack:///src/app/routes/login/slice/reducer.ts","webpack:///src/app/routes/login/slice/selectors.ts","webpack:///src/app/routes/login/slice/state.ts","webpack:///src/app/routes/products/product-list/product-list.component.html","webpack:///src/app/routes/products/product-list/product-list.component.ts","webpack:///src/app/routes/products/products.module.ts","webpack:///src/app/routes/products/products.service.ts","webpack:///src/app/routes/products/slice/actions.ts","webpack:///src/app/routes/products/slice/effects.ts","webpack:///src/app/routes/products/slice/products-slice.module.ts","webpack:///src/app/routes/products/slice/reducer.ts","webpack:///src/app/routes/products/slice/selectors.ts","webpack:///src/app/routes/products/slice/state.ts","webpack:///src/app/shared/app-http-loading/app-http-loading.component.html","webpack:///src/app/shared/app-http-loading/app-http-loading.component.ts","webpack:///src/app/shared/app-http-loading/app-http-loading.module.ts","webpack:///src/app/shared/app-http-loading/slice/actions.ts","webpack:///src/app/shared/app-http-loading/slice/app-http-loading-slice.module.ts","webpack:///src/app/shared/app-http-loading/slice/reducer.ts","webpack:///src/app/shared/app-http-loading/slice/selectors.ts","webpack:///src/app/shared/app-http-loading/slice/state.ts","webpack:///src/app/shared/app-material.module.ts","webpack:///src/app/shared/errors/angular-error-handler.service.ts","webpack:///src/app/shared/errors/translate-errors.ts","webpack:///src/app/shared/fake-http-error/fake-http-error.module.ts","webpack:///src/app/shared/fake-http-error/fake-http-error.service.ts","webpack:///src/app/shared/fake-http-error/slice/actions.ts","webpack:///src/app/shared/fake-http-error/slice/effects.ts","webpack:///src/app/shared/fake-http-error/slice/fake-http-error-slice.module.ts","webpack:///src/app/shared/fake-http-error/slice/reducer.ts","webpack:///src/app/shared/fake-http-error/slice/selectors.ts","webpack:///src/app/shared/fake-http-error/slice/state.ts","webpack:///src/app/shared/interceptors/authentication-error.interceptor.ts","webpack:///src/app/shared/interceptors/server-error.interceptor.ts","webpack:///src/app/shared/logger.service.ts","webpack:///src/app/shared/notification.service.ts","webpack:///src/app/shared/root-store/root-store.module.ts","webpack:///src/app/shared/root-store/selectors.ts","webpack:///src/app/shared/shared.module.ts","webpack:///src/app/shared/top-bar/top-bar.component.html","webpack:///src/app/shared/top-bar/top-bar.component.ts","webpack:///src/app/shared/top-bar/top-bar.module.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","AppRoutingModule","AppComponent","store","router","destroy$","title","select","pipe","subscribe","httpError","navigate","user","console","log","next","complete","AppModule","HttpErrorComponent","httpErrorMessage","message","dispatch","HttpErrorModule","ActionTypes","HttpErrorAction","payload","type","HTTP_ERROR","HttpErrorClearAction","HTTP_ERROR_CLEAR","HttpErrorSliceModule","featureReducer","state","action","getHttpError","selectHttpErrorState","selectHttpError","initialState","LoginFormComponent","loginFormService","submitLogin","loginFake","loginForm","reset","ev","emit","uid","_loginForm","controls","value","password","pwd","LoginFormModule","LoginFormService","fb","initForm","subscribeLoginFormStoreSlice","group","required","valueChanges","login","patchValue","emitEvent","form","LoginFormUpdate","LOGIN_FORM_UPDATE","LoginFormSliceModule","getLogin","selectLoginState","selectLogin","LoginComponent","ENUM_LOGIN_FAKE","LoginModule","LoginService","http","get","res","data","LoginRequestAction","LOGIN_REQUEST","LoginFailureAction","LOGIN_FAILURE","LoginSuccessAction","LOGIN_SUCCESS","LogoutRequestAction","LOGOUT_REQUEST","LogoutSuccessAction","LOGOUT_SUCCESS","LogoutFailureAction","LOGOUT_FAILURE","LoginEffects","loginService","actions$","loginRequestEffect$","x","logoutRequestEffect$","logout","LoginSliceModule","appHttpLoading","isLoading","isLoaded","getIsLoading","getIsLoaded","getUser","selectLoginIsLoading","selectLoginIsLoaded","selectLoginUser","ProductListComponent","productsService","ProductsModule","ProductsService","ProductsRequestAction","PRODUCTS_REQUEST","ProductsRequestFailureAction","PRODUCTS_REQUEST_FAILURE","ProductsRequestSuccessAction","PRODUCTS_REQUEST_SUCCESS","ProductsEffects","productsRequestEffect$","products","ProductsSliceModule","getProducts","selectProductsState","selectProductsIsLoading","selectProductsIsLoaded","selectProducts","AppHttpLoadingComponent","isLoading$","isLoadingJoined$","appLoading","globalRedundantLoading","AppHttpLoadingModule","StartLoadingAction","START_LOADING","StopLoadingAction","STOP_LOADING","AppHttpLoadingSliceModule","selectLoadingState","selectIsLoading","selectIsLoaded","AppMaterialModule","AngularErrorHandlerService","loggingService","notificationService","error","stackTrace","showError","logError","getClientMessage","navigator","onLine","toString","getClientStack","stack","getServerMessage","getServerStack","FakeHttpErrorModule","FakeHttpErrorService","FakeHttpErrorRequestAction","FAKE_HTTP_ERROR_REQUEST","FakeHttpErrorRequestFailureAction","FAKE_HTTP_ERROR_REQUEST_FAILURE","FakeHttpErrorEffects","fakeHttpService","fakeHttpErrorRequestEffect$","fake","err","FakeHttpErrorSliceModule","getFakeData","fakeData","selectFakeHttpErrorState","selectFakeHttpErrorIsLoading","selectFakeHttpErrorIsLoaded","selectFakeHttpError","AuthenticationErrorInterceptor","request","handle","status","ServerErrorInterceptor","event","errorMessage","ErrorEvent","LoggerService","logToLocalStorage","logToSessionStorage","logToRemoteLogger","_stack","NotificationService","snackBar","open","duration","panelClass","RootStoreModule","loginIsLoading","productsIsLoading","fakeHttpErrorIsLoading","loginIsLoaded","productsIsLoaded","fakeHttpErrorIsLoaded","SharedModule","TopBarComponent","user$","TopBarModule","environment","production"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HttpErrorComponent } from './routes/http-error/http-error.component';\nimport { LoginComponent } from './routes/login/login.component';\nimport { ProductListComponent } from './routes/products/product-list/product-list.component';\n\nconst routes: Routes = [\n  { path: '', component: LoginComponent },\n  { path: 'http-error', component: HttpErrorComponent },\n  { path: 'product-list', component: ProductListComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","<crud-seed-top-bar></crud-seed-top-bar>\n<crud-seed-loading></crud-seed-loading>\n\n<div>\n  <router-outlet></router-outlet>\n</div>\n\n<!--\nCopyright Google LLC. All Rights Reserved.\nUse of this source code is governed by an MIT-style license that\ncan be found in the LICENSE file at http://angular.io/license\n-->\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport * as HttpErrorSelectors from './routes/http-error/slice/selectors';\nimport * as LoginSelectors from './routes/login/slice/selectors';\nimport * as RootStoreState from './shared/root-store/root-state';\nimport { User } from './shared/user.interface';\n\n@Component({\n  selector: 'crud-seed-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit, OnDestroy {\n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  constructor(private store: Store<RootStoreState.State>, private router: Router) { }\n\n  // tslint:disable-next-line: typedef\n  title = 'CRUDSeed: Products CRUD';\n\n  ngOnInit(): void {\n    this.store.select(\n      HttpErrorSelectors.selectHttpError\n    ).pipe(takeUntil(this.destroy$))\n      .subscribe((httpError: HttpErrorResponse) => {\n        if (httpError) {\n          this.router.navigate(['/http-error']);\n        }\n      });\n\n    this.store.select(\n      LoginSelectors.selectLoginUser\n    ).pipe(takeUntil(this.destroy$))\n      .subscribe((user: User) => {\n        if (!user) {\n          this.router.navigate(['/']);\n          console.log('no user');\n        } else {\n          this.router.navigate(['/product-list']);\n        }\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\nimport { SharedModule } from './shared/shared.module';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    SharedModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","<div class=\"http-error-container\">\n  <mat-card class=\"example-card\" class=\"mat-elevation-z4\">\n    <mat-card-header>\n      <mat-card-title>HTTP Error</mat-card-title>\n      <mat-card-subtitle>(contact your adminstrator)</mat-card-subtitle>\n    </mat-card-header>\n\n    <mat-card-content>\n      <p><i class=\"material-icons\">error</i> {{httpErrorMessage}}</p>\n    </mat-card-content>\n    <mat-card-actions>\n      <div class=\"logout-button\">\n        <button\n          mat-stroked-button\n          color=\"primary\"\n          (click)=\"logout()\">\n          Logout\n        </button>\n      </div>\n    </mat-card-actions>\n  </mat-card>\n</div>\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport * as LoginActions from '../../routes/login/slice/actions';\nimport * as RootStoreState from '../../shared/root-store/root-state';\nimport * as HttpErrorSelectors from './slice/selectors';\n\n@Component({\n  selector: 'crud-seed-http-error',\n  templateUrl: './http-error.component.html',\n  styleUrls: ['./http-error.component.scss']\n})\nexport class HttpErrorComponent implements OnInit, OnDestroy {\n\n  destroy$: Subject<boolean> = new Subject<boolean>();\n  httpError: HttpErrorResponse;\n  // tslint:disable-next-line: no-inferrable-types\n  httpErrorMessage: string = 'please logout first';\n\n  constructor(private store: Store<RootStoreState.State>, private router: Router) { }\n\n  ngOnInit(): void {\n    this.store.select(\n      HttpErrorSelectors.selectHttpError\n    ).pipe(takeUntil(this.destroy$))\n      .subscribe((httpError: HttpErrorResponse) => {\n        if (httpError) {\n          console.log(httpError);\n          this.httpError = httpError;\n          this.httpErrorMessage = httpError.message;\n        }\n      });\n  }\n\n  logout(): void {\n    this.store.dispatch(new LoginActions.LogoutRequestAction());\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AppRoutingModule } from 'src/app/app-routing.module';\nimport { AppMaterialModule } from 'src/app/shared/app-material.module';\nimport { HttpErrorComponent } from './http-error.component';\n\n@NgModule({\n  declarations: [HttpErrorComponent],\n  exports: [HttpErrorComponent],\n  imports: [\n    CommonModule,\n    AppRoutingModule,\n    AppMaterialModule\n  ]\n})\nexport class HttpErrorModule { }\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { Action } from '@ngrx/store';\n\nexport enum ActionTypes {\n    HTTP_ERROR = '[My Feature] HTTP Error',\n    HTTP_ERROR_CLEAR = '[My Feature] HTTP Error Clear'\n}\n\nexport class HttpErrorAction implements Action {\n    readonly type: ActionTypes.HTTP_ERROR = ActionTypes.HTTP_ERROR;\n    constructor(public payload: { httpError: HttpErrorResponse }) { }\n}\n\nexport class HttpErrorClearAction implements Action {\n  readonly type: ActionTypes.HTTP_ERROR_CLEAR = ActionTypes.HTTP_ERROR_CLEAR;\n}\n\nexport type Actions =\n    | HttpErrorAction\n    | HttpErrorClearAction;\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { featureReducer } from './reducer';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    StoreModule.forFeature('httpErrorFeature', featureReducer)\n  ]\n})\nexport class HttpErrorSliceModule { }\n","import { Actions, ActionTypes } from './actions';\nimport { initialState, State } from './state';\n\nexport function featureReducer(state: State = initialState, action: Actions): State {\n  switch (action.type) {\n    case ActionTypes.HTTP_ERROR:\n      return {\n        ...state,\n        httpError: action.payload.httpError\n      };\n    case ActionTypes.HTTP_ERROR_CLEAR:\n      return {\n        ...state,\n        ...initialState\n      };\n    default: {\n      return state;\n    }\n  }\n}\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector\n} from '@ngrx/store';\n\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { State } from './state';\n\nconst getHttpError = (state: State): HttpErrorResponse => state.httpError;\n\nexport const selectHttpErrorState: MemoizedSelector<\n  object,\n  State\n> = createFeatureSelector<State>('httpErrorFeature');\n\nexport const selectHttpError: MemoizedSelector<\n  object,\n  HttpErrorResponse\n> = createSelector(\n  selectHttpErrorState,\n  getHttpError\n);\n","import { HttpErrorResponse } from '@angular/common/http';\n\n\nexport interface State {\n  httpError: HttpErrorResponse | null;\n}\n\nexport const initialState: State = {\n  httpError: null\n};\n","<form [formGroup]=\"loginForm\" class=\"login-form\">\n  <div>\n    <mat-form-field>\n      <!-- <mat-label>username</mat-label> -->\n      <input matInput placeholder=\"(username)\" formControlName=\"uid\">\n      <mat-hint>(uid = '{{loginFake.UID}}')</mat-hint>\n      <mat-error>(uid = '{{loginFake.UID}}')</mat-error>\n    </mat-form-field>\n  </div>\n\n  <div>\n    <mat-form-field>\n      <!-- <mat-label>password</mat-label> -->\n      <input matInput placeholder=\"(password)\" formControlName=\"pwd\">\n      <mat-hint>(password = '{{loginFake.PWD}}')</mat-hint>\n      <mat-error>(password = '{{loginFake.PWD}}')</mat-error>\n    </mat-form-field>\n  </div>\n\n  <!-- since button's inside a 'form' it already seems to act as 'submit' so ngSubmit above not needed -->\n  <div class=\"login-button\">\n    <button\n      mat-stroked-button\n      color=\"primary\"\n      [disabled]=\"loginForm.invalid\"\n      (click)=\"submit($event)\">\n      <i class=\"material-icons\">account_circle</i>Login\n    </button>\n  </div>\n</form>\n","import { Component, EventEmitter, OnDestroy, OnInit, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ENUM_LOGIN_FAKE } from '../login.fake';\nimport { Login } from '../login.interface';\nimport { LoginFormService } from './login-form.service';\n\n@Component({\n  selector: 'crud-seed-login-form',\n  templateUrl: './login-form.component.html',\n  styleUrls: ['./login-form.component.scss'],\n  providers: [LoginFormService] // this makes service bound it this components life-cycle (not a singleton!)\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n\n  @Output() submitLogin: EventEmitter<Login> = new EventEmitter<Login>();\n\n  loginFake: typeof ENUM_LOGIN_FAKE = ENUM_LOGIN_FAKE;\n  loginForm: FormGroup = this.loginFormService.loginForm;\n\n  constructor(private loginFormService: LoginFormService) { }\n\n  ngOnInit(): void {\n    // always clear form on entry. this will clear form slice too\n    this.loginForm.reset();\n  }\n\n  submit(ev: Event): void {\n    // this.submitLogin.emit({ uid: ENUM_LOGIN_FAKE.UID, password: ENUM_LOGIN_FAKE.PWD });\n    this.submitLogin.emit(\n      { uid: this.loginFormService._loginForm.controls.uid.value,\n        password: this.loginFormService._loginForm.controls.pwd.value\n      }\n    );\n  }\n\n  ngOnDestroy(): void {\n\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AppMaterialModule } from 'src/app/shared/app-material.module';\nimport { LoginFormComponent } from './login-form.component';\n\n@NgModule({\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  imports: [\n    CommonModule,\n    AppMaterialModule,\n    ReactiveFormsModule\n  ]\n})\nexport class LoginFormModule { }\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/internal/operators/takeUntil';\nimport { User } from 'src/app/shared/user.interface';\nimport * as RootStoreState from '../../../shared/root-store/root-state';\nimport { Login } from '../login.interface';\nimport * as LoginFormActions from './slice/actions';\nimport * as LoginFormSelectors from './slice/selectors';\n\n@Injectable()\nexport class LoginFormService implements OnDestroy {\n\n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  _loginForm: FormGroup = null;\n\n  get loginForm(): FormGroup {\n    return this._loginForm;\n  }\n\n  set loginForm(form: FormGroup) {\n    this._loginForm = form;\n  }\n\n  constructor(private fb: FormBuilder, private store: Store<RootStoreState.State>) {\n    this.initForm();\n    this.subscribeLoginFormStoreSlice();\n\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n\n  initForm(): void {\n\n    this.loginForm = this.fb.group({\n      uid: ['', Validators.required],\n      pwd: ['', Validators.required]\n    });\n\n    this.loginForm.valueChanges\n      .pipe(\n        takeUntil(this.destroy$),\n      )\n      .subscribe((login: Login) => {\n        // this merely updates fomr slice for later retrieval:\n        this.store.dispatch(new LoginFormActions.LoginFormUpdate({ login }));\n      });\n\n  }\n\n  subscribeLoginFormStoreSlice(): void {\n    this.store.select(\n      LoginFormSelectors.selectLogin\n    )\n      .pipe(\n        takeUntil(this.destroy$)\n      ).subscribe((user: User) => {\n        this.loginForm.patchValue(user, { emitEvent: false });\n      });\n\n  }\n\n}\n","import { Action } from '@ngrx/store';\n\nimport { Login } from '../../login.interface';\n\nexport enum ActionTypes {\n    LOGIN_FORM_UPDATE = '[My Feature] Login Form Update'\n}\n\nexport class LoginFormUpdate implements Action {\n    readonly type: ActionTypes.LOGIN_FORM_UPDATE = ActionTypes.LOGIN_FORM_UPDATE;\n    constructor(public payload: {login: Login }) { }\n}\n\nexport type Actions =\n    | LoginFormUpdate;\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { featureReducer } from './reducer';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    StoreModule.forFeature('loginFormFeature', featureReducer)\n  ]\n})\nexport class LoginFormSliceModule { }\n","import { Actions, ActionTypes } from './actions';\nimport { initialState, State } from './state';\n\n\nexport function featureReducer(state: State = initialState, action: Actions): State {\n  switch (action.type) {\n    case ActionTypes.LOGIN_FORM_UPDATE:\n      return {\n        ...state,\n        login: action.payload.login\n      };\n    default: {\n      return state;\n    }\n  }\n}\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector\n} from '@ngrx/store';\n\nimport { Login } from '../../../login/login.interface';\n\nimport { State } from './state';\n\nconst getLogin = (state: State): Login => state.login;\n\nexport const selectLoginState: MemoizedSelector<\n  object,\n  State\n> = createFeatureSelector<State>('loginFormFeature');\n\nexport const selectLogin: MemoizedSelector<\n  object,\n  Login\n> = createSelector(\n  selectLoginState,\n  getLogin\n);\n","import { Login } from '../../../login/login.interface';\n\nexport interface State {\n  login: Login | null;\n}\n\nexport const initialState: State = {\n  login: { uid: '', password: '' },\n};\n","<div class=\"login-container\">\n  <mat-card class=\"mat-elevation-z4\">\n    <mat-card-content>\n      <crud-seed-login-form (submitLogin)=\"requestLogin()\"></crud-seed-login-form>\n    </mat-card-content>\n  </mat-card>\n</div>\n\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport * as RootStoreState from '../../shared/root-store/root-state';\nimport * as LoginActions from '../login/slice/actions';\n\n@Component({\n  selector: 'crud-seed-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit, OnDestroy {\n\n  constructor(private store: Store<RootStoreState.State>) { }\n\n  ngOnInit(): void {\n  }\n\n  requestLogin(): void {\n    this.store.dispatch(new LoginActions.LoginRequestAction());\n  }\n\n  ngOnDestroy(): void {\n  }\n\n}\n","export enum ENUM_LOGIN_FAKE {\n  UID = 'moadeli',\n  PWD = '1234'\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AppRoutingModule } from 'src/app/app-routing.module';\nimport { AppMaterialModule } from 'src/app/shared/app-material.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  declarations: [LoginComponent],\n  exports: [LoginComponent],\n  imports: [\n    CommonModule,\n    LoginFormModule,\n    AppRoutingModule,\n    AppMaterialModule\n  ]\n})\nexport class LoginModule { }\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { delay, map } from 'rxjs/operators';\nimport { User } from '../../shared/user.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  constructor(private http: HttpClient) { }\n\n  login(uid: string, password: string): Observable<User> {\n\n    // return of({ uid, userName: ENUM_LOGIN_FAKE.UID, timeLoggedIn: ENUM_LOGIN_FAKE.PWD })\n    //   .pipe(\n    //     delay(2000) // simulate http api delay (with global state swirl)\n    //   );\n\n    // return of({ uid, userName: uid, timeLoggedIn: '3773' })\n    //   .pipe(\n    //     delay(2000) // simulate http api delay (with global state swirl)\n    //   );\n\n    return this.http.get('http://localhost:3000/api/login')\n      // tslint:disable-next-line: no-any\n      .pipe(map( (res: any) => res.data));\n  }\n\n  logout(): Observable<User> {\n\n    return of({})\n      .pipe(\n        delay(2000) // simulate http api delay (with global state swirl)\n                    // possibky cleanup local storage\n      );\n  }\n}\n\n","import { Action } from '@ngrx/store';\nimport { User } from '../../../shared/user.interface';\n\nexport enum ActionTypes {\n    LOGIN_REQUEST = '[My Feature] Login Request',\n    LOGIN_FAILURE = '[My Feature] Login Failure',\n    LOGIN_SUCCESS = '[My Feature] Login Success',\n    LOGOUT_REQUEST = '[My Feature] Logout Request',\n    LOGOUT_SUCCESS = '[My Feature] Logout Success',\n    LOGOUT_FAILURE = '[My Feature] Logout Failure'\n}\n\nexport class LoginRequestAction implements Action {\n    readonly type: ActionTypes.LOGIN_REQUEST = ActionTypes.LOGIN_REQUEST;\n}\n\nexport class LoginFailureAction implements Action {\n    readonly type: ActionTypes.LOGIN_FAILURE = ActionTypes.LOGIN_FAILURE;\n    constructor(public payload: { appHttpError: string }) { }\n}\n\nexport class LoginSuccessAction implements Action {\n    readonly type: ActionTypes.LOGIN_SUCCESS = ActionTypes.LOGIN_SUCCESS;\n    constructor(public payload: { user: User }) { }\n}\n\nexport class LogoutRequestAction implements Action {\n  readonly type: ActionTypes.LOGOUT_REQUEST = ActionTypes.LOGOUT_REQUEST;\n}\n\nexport class LogoutSuccessAction implements Action {\n  readonly type: ActionTypes.LOGOUT_SUCCESS = ActionTypes.LOGOUT_SUCCESS;\n}\n\nexport class LogoutFailureAction implements Action {\n  readonly type: ActionTypes.LOGOUT_FAILURE = ActionTypes.LOGOUT_FAILURE;\n  constructor(public payload: { appHttpError: string }) { }\n}\n\nexport type Actions =\n    | LoginRequestAction\n    | LoginFailureAction\n    | LoginSuccessAction\n    | LogoutRequestAction\n    | LogoutSuccessAction\n    | LogoutFailureAction;\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, switchMap, tap, withLatestFrom } from 'rxjs/operators';\nimport * as RootStoreState from '../../../shared/root-store/root-state';\nimport * as LoginFormSelectors from '../../login/login-form/slice/selectors';\nimport { LoginService } from '../login.service';\nimport * as featureActions from './actions';\n\n@Injectable()\nexport class LoginEffects {\n  constructor(private loginService: LoginService, private actions$: Actions, private store: Store<RootStoreState.State>) { }\n\n  @Effect()\n  loginRequestEffect$: Observable<Action> = this.actions$.pipe(\n    ofType<featureActions.LoginRequestAction>(\n      featureActions.ActionTypes.LOGIN_REQUEST\n    ),\n    withLatestFrom(this.store.select(\n      LoginFormSelectors.selectLogin\n    )),\n    switchMap(([, login]) =>\n      this.loginService\n        .login(login.uid, login.password)\n        .pipe(\n          tap( x => {\n            console.log(x);\n          }),\n          map(\n            user =>\n              new featureActions.LoginSuccessAction({\n                user\n              })\n          )\n        )\n    )\n  );\n\n  @Effect()\n  logoutRequestEffect$: Observable<Action> = this.actions$.pipe(\n    ofType<featureActions.LogoutRequestAction>(\n      featureActions.ActionTypes.LOGOUT_REQUEST\n    ),\n    switchMap(() =>\n      this.loginService\n        .logout()\n        .pipe(\n          map(\n            () =>\n              new featureActions.LogoutSuccessAction()\n          )\n        )\n    )\n  );\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { LoginEffects } from './effects';\nimport { featureReducer } from './reducer';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    StoreModule.forFeature('loginFeature', featureReducer),\n    EffectsModule.forFeature([LoginEffects])\n  ],\n  providers: [LoginEffects]\n})\nexport class LoginSliceModule { }\n","import { Actions, ActionTypes } from './actions';\nimport { initialState, State } from './state';\n\nexport function featureReducer(state: State = initialState, action: Actions): State {\n  switch (action.type) {\n    case ActionTypes.LOGIN_REQUEST:\n      return {\n        ...state,\n        appHttpLoading: {\n          isLoading: true,\n          isLoaded: false\n        }\n      };\n    case ActionTypes.LOGIN_SUCCESS:\n      return {\n        ...state,\n        user: action.payload.user,\n        appHttpLoading: {\n          isLoading: false,\n          isLoaded: true\n        }\n      };\n    case ActionTypes.LOGIN_FAILURE:\n      return {\n        ...state,\n        appHttpLoading: {\n          isLoading: false,\n          isLoaded: false\n        }\n      };\n    case ActionTypes.LOGOUT_REQUEST:\n      return {\n        ...state,\n        user: null,\n        appHttpLoading: {\n          isLoading: true,\n          isLoaded: false\n        }\n      };\n    case ActionTypes.LOGOUT_FAILURE:\n      return {\n        ...state,\n        appHttpLoading: {\n          isLoading: false,\n          isLoaded: false\n        }\n      };\n    case ActionTypes.LOGOUT_SUCCESS:\n      return {\n        ...state,\n        ...initialState\n      };\n    default: {\n      return state;\n    }\n  }\n}\n","import {\n    createFeatureSelector,\n    createSelector,\n    MemoizedSelector\n} from '@ngrx/store';\n\nimport { User } from '../../../shared/user.interface';\n\nimport { State } from './state';\n\nconst getIsLoading = (state: State): boolean => state.appHttpLoading.isLoading;\n\nconst getIsLoaded = (state: State): boolean => state.appHttpLoading.isLoaded;\n\nconst getUser = (state: State): User => {\n  return state.user;\n};\n\nexport const selectLoginState: MemoizedSelector<\n    object,\n    State\n> = createFeatureSelector<State>('loginFeature');\n\nexport const selectLoginIsLoading: MemoizedSelector<\n    object,\n    boolean\n> = createSelector(\n    selectLoginState,\n    getIsLoading\n);\n\nexport const selectLoginIsLoaded: MemoizedSelector<\n    object,\n    boolean\n> = createSelector(\n    selectLoginState,\n    getIsLoaded\n);\n\nexport const selectLoginUser: MemoizedSelector<\n    object,\n    User\n> = createSelector(\n    selectLoginState,\n    getUser\n);\n","import { AppHttpLoading } from 'src/app/shared/app-http-loading/app-http-loading.interface';\nimport { User } from '../../../shared/user.interface';\n\nexport interface State {\n  user: User | null;\n  appHttpLoading: AppHttpLoading;\n}\n\nexport const initialState: State = {\n  user: null,\n  appHttpLoading: {\n    isLoading: false,\n    isLoaded: false\n  }\n};\n\n","<div class=\"products-container\">\n  <h2>Products</h2>\n  <div *ngFor=\"let product of products$ | async\">\n\n    <h3>\n        {{ product.id }}&nbsp;&nbsp;{{ product.name }}&nbsp;,&nbsp;{{product.date}}&nbsp;,&nbsp;{{product.hHMmSs}}\n    </h3>\n\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport * as RootStoreState from '../../../shared/root-store/root-state';\nimport { Product } from '../product.interface';\nimport { ProductsService } from '../products.service';\nimport * as ProductsActions from '../slice/actions';\nimport * as ProductsSelectors from '../slice/selectors';\n\n@Component({\n  selector: 'crud-seed-product-list',\n  templateUrl: './product-list.component.html',\n  styleUrls: ['./product-list.component.scss']\n})\nexport class ProductListComponent implements OnInit {\n\n  get products$(): Observable<Array<Product>> {\n    return this.store.select(\n      ProductsSelectors.selectProducts\n    );\n  }\n\n  constructor(private productsService: ProductsService, private store: Store<RootStoreState.State>) { }\n\n  ngOnInit(): void {\n    this.store.dispatch(new ProductsActions.ProductsRequestAction());\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ProductListComponent } from './product-list/product-list.component';\nimport { ProductsService } from './products.service';\n\n@NgModule({\n  declarations: [ProductListComponent],\n  imports: [\n    CommonModule\n  ],\n  providers: [ProductsService]\n})\nexport class ProductsModule { }\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { delay, map } from 'rxjs/operators';\nimport { Product } from './product.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductsService {\n\n  constructor(private http: HttpClient) { }\n\n  products(): Observable<Array<Product>> {\n\n    return this.http.get('http://localhost:3000/api/products')\n      // tslint:disable-next-line: no-any\n      .pipe(map( (res: any) => {\n        return res.data;\n      }));\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { Product } from '../product.interface';\n\nexport enum ActionTypes {\n    PRODUCTS_REQUEST = '[My Feature] Products Request',\n    PRODUCTS_REQUEST_FAILURE = '[My Feature] Products Request Failure',\n    PRODUCTS_REQUEST_SUCCESS = '[My Feature] Products Request Success'\n}\n\nexport class ProductsRequestAction implements Action {\n    readonly type: ActionTypes.PRODUCTS_REQUEST = ActionTypes.PRODUCTS_REQUEST;\n}\n\nexport class ProductsRequestFailureAction implements Action {\n    readonly type: ActionTypes.PRODUCTS_REQUEST_FAILURE = ActionTypes.PRODUCTS_REQUEST_FAILURE;\n    constructor(public payload: { appHttpError: string }) { }\n}\n\nexport class ProductsRequestSuccessAction implements Action {\n    readonly type: ActionTypes.PRODUCTS_REQUEST_SUCCESS = ActionTypes.PRODUCTS_REQUEST_SUCCESS;\n    constructor(public payload: { products: Array<Product> }) { }\n}\n\nexport type Actions =\n    | ProductsRequestAction\n    | ProductsRequestFailureAction\n    | ProductsRequestSuccessAction;\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { ProductsService } from '../products.service';\nimport * as featureActions from './actions';\n\n@Injectable()\nexport class ProductsEffects {\n  constructor(private productsService: ProductsService, private actions$: Actions) { }\n\n  @Effect()\n  productsRequestEffect$: Observable<Action> = this.actions$.pipe(\n    ofType<featureActions.ProductsRequestAction>(\n      featureActions.ActionTypes.PRODUCTS_REQUEST\n    ),\n    switchMap(() =>\n      this.productsService\n        .products()\n        .pipe(\n          map(\n            products =>\n              new featureActions.ProductsRequestSuccessAction({\n                products\n              })\n          )\n        )\n    )\n  );\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { ProductsEffects } from './effects';\nimport { featureReducer } from './reducer';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    StoreModule.forFeature('productsFeature', featureReducer),\n    EffectsModule.forFeature([ProductsEffects])\n  ],\n  providers: [ProductsEffects]\n})\nexport class ProductsSliceModule { }\n\n","import { Actions, ActionTypes } from './actions';\nimport { initialState, State } from './state';\n\nexport function featureReducer(state: State = initialState, action: Actions): State {\n  switch (action.type) {\n    case ActionTypes.PRODUCTS_REQUEST:\n      return {\n        ...state,\n        appHttpLoading: {\n          isLoading: true,\n          isLoaded: false\n        }\n      };\n    case ActionTypes.PRODUCTS_REQUEST_SUCCESS:\n      return {\n        ...state,\n        products: action.payload.products,\n        appHttpLoading: {\n          isLoading: false,\n          isLoaded: true\n        }\n      };\n    case ActionTypes.PRODUCTS_REQUEST_FAILURE:\n      return {\n        ...state,\n        appHttpLoading: {\n          isLoading: false,\n          isLoaded: false\n        }\n      };\n    default: {\n      return state;\n    }\n  }\n}\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector\n} from '@ngrx/store';\n\nimport { Product } from '../product.interface';\n\nimport { State } from './state';\n\nconst getIsLoading = (state: State): boolean => state.appHttpLoading.isLoading;\n\nconst getIsLoaded = (state: State): boolean => state.appHttpLoading.isLoaded;\n\nconst getProducts = (state: State): Array<Product> => state.products;\n\nexport const selectProductsState: MemoizedSelector<\n  object,\n  State\n> = createFeatureSelector<State>('productsFeature');\n\nexport const selectProductsIsLoading: MemoizedSelector<\n  object,\n  boolean\n> = createSelector(\n  selectProductsState,\n  getIsLoading\n);\n\nexport const selectProductsIsLoaded: MemoizedSelector<\n  object,\n  boolean\n> = createSelector(\n  selectProductsState,\n  getIsLoaded\n);\n\nexport const selectProducts: MemoizedSelector<\n  object,\n  Array<Product>\n> = createSelector(\n  selectProductsState,\n  getProducts\n);\n","import { AppHttpLoading } from 'src/app/shared/app-http-loading/app-http-loading.interface';\nimport { Product } from '../product.interface';\n\nexport interface State {\n  products: Array<Product> | null;\n  appHttpLoading: AppHttpLoading;\n}\n\nexport const initialState: State = {\n  products: null,\n  appHttpLoading: {\n    isLoading: false,\n    isLoaded: false\n  }\n};\n","<div class=\"progress-overlay\" [hidden]=\"(isLoadingJoined$ | async) === false\">\n  <div class=\"progress-loader\">\n\n    <mat-spinner style=\"margin:0 auto;\"></mat-spinner>\n\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { combineLatest } from 'rxjs';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { map } from 'rxjs/internal/operators/map';\nimport * as RootStoreState from '../../shared/root-store/root-state';\nimport * as GlobalSelectors from '../../shared/root-store/selectors';\nimport * as AppHttpLoadingSelectors from '../app-http-loading/slice/selectors';\n\n@Component({\n  selector: 'crud-seed-loading',\n  templateUrl: './app-http-loading.component.html',\n  styleUrls: ['./app-http-loading.component.scss']\n})\nexport class AppHttpLoadingComponent implements OnInit {\n\n  isLoading$: Observable<boolean>;\n  isLoadingJoined$: Observable<boolean>;\n\n  constructor(private store: Store<RootStoreState.State>) { }\n\n  // VERY IMPORTANT!!!\n  // below the ONLY needed slice/observable stack is the\n  // AppHttpLoadingSelectors.selectIsLoading which is handled\n  // in the server interceptor\n  // The global loading GlobalSelectors.selectIsLoading\n  // is not need since it is redundantly added to each and every\n  // slice which is not DRY. It is tmp'rarily used to merely\n  // simulate an http call via a delay timer. When real http\n  // api calls are made that entire infractructure slice\n  // can be removed.\n\n  ngOnInit(): void {\n    // this.isLoading$ =\n    // this.store.select(\n    //   GlobalSelectors.selectIsLoading\n    // );\n    this.isLoading$ =\n      this.store.select(\n        AppHttpLoadingSelectors.selectIsLoading\n      );\n\n    this.isLoadingJoined$ = combineLatest([\n      this.store.select(\n        AppHttpLoadingSelectors.selectIsLoading\n      ),\n      this.store.select(\n        GlobalSelectors.selectIsLoading\n      )]\n    ).pipe(map(([appLoading, globalRedundantLoading]: [boolean, boolean]) => {\n      return appLoading;\n    }));\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AppMaterialModule } from '../app-material.module';\n\nimport { AppHttpLoadingComponent } from './app-http-loading.component';\n\n@NgModule({\n  declarations: [AppHttpLoadingComponent],\n  exports: [AppHttpLoadingComponent],\n  imports: [\n    CommonModule,\n    AppMaterialModule\n  ]\n})\nexport class AppHttpLoadingModule { }\n","import { Action } from '@ngrx/store';\n\n\nexport enum ActionTypes {\n    START_LOADING = '[My Feature] Start Loading',\n    STOP_LOADING = '[My Feature] Stop Loading'\n}\n\nexport class StartLoadingAction implements Action {\n    readonly type: ActionTypes.START_LOADING = ActionTypes.START_LOADING;\n}\n\nexport class StopLoadingAction implements Action {\n    readonly type: ActionTypes.STOP_LOADING = ActionTypes.STOP_LOADING;\n}\n\n\nexport type Actions =\n    | StartLoadingAction\n    | StopLoadingAction;\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { featureReducer } from './reducer';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    StoreModule.forFeature('loadingFeature', featureReducer)\n  ]\n})\nexport class AppHttpLoadingSliceModule { }\n","import { Actions, ActionTypes } from './actions';\nimport { initialState, State } from './state';\n\nexport function featureReducer(state: State = initialState, action: Actions): State {\n  switch (action.type) {\n    case ActionTypes.START_LOADING:\n      return {\n        ...state,\n        appHttpLoading: {\n          isLoading: true,\n          isLoaded: false\n        }\n      };\n    case ActionTypes.STOP_LOADING:\n      return {\n        ...state,\n        appHttpLoading: {\n          isLoading: false,\n          isLoaded: true\n        }\n      };\n    default: {\n      return state;\n    }\n  }\n}\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector\n} from '@ngrx/store';\n\nimport { State } from './state';\n\nconst getIsLoading = (state: State): boolean => state.appHttpLoading.isLoading;\n\nconst getIsLoaded = (state: State): boolean => state.appHttpLoading.isLoaded;\n\nexport const selectLoadingState: MemoizedSelector<\n  object,\n  State\n> = createFeatureSelector<State>('loadingFeature');\n\nexport const selectIsLoading: MemoizedSelector<\n  object,\n  boolean\n> = createSelector(\n  selectLoadingState,\n  getIsLoading\n);\n\nexport const selectIsLoaded: MemoizedSelector<\n  object,\n  boolean\n> = createSelector(\n  selectLoadingState,\n  getIsLoaded\n);\n\n","import { AppHttpLoading } from 'src/app/shared/app-http-loading/app-http-loading.interface';\n\nexport interface State {\n  appHttpLoading: AppHttpLoading;\n}\n\nexport const initialState: State = {\n  appHttpLoading: {\n    isLoading: false,\n    isLoaded: false\n  }\n};\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    BrowserAnimationsModule,\n    MatInputModule,\n    MatProgressSpinnerModule,\n    MatFormFieldModule,\n    MatCardModule,\n    MatButtonModule,\n    MatSnackBarModule\n  ],\n  exports: [\n    BrowserAnimationsModule,\n    MatProgressSpinnerModule,\n    MatInputModule,\n    MatProgressSpinnerModule,\n    MatFormFieldModule,\n    MatCardModule,\n    MatButtonModule,\n    MatSnackBarModule\n  ]\n})\nexport class AppMaterialModule { }\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { ErrorHandler, Injectable } from '@angular/core';\nimport { LoggerService } from '../logger.service';\nimport { NotificationService } from '../notification.service';\nimport * as ErrorFunctions from './translate-errors';\n\n// One traditional way of handling errors in Angular is to provide an ErrorHandler class.\n// This class can be extended to create your own global error handler. This is also a useful\n// way to handle all errors that occur, but is mostly useful for tracking error logs. For\n// reference, you can check our earlier tutorial on how to use ErrorHandler in Angular 2+.\n\n// By implementing error handling in HttpClient or HttpInterceptor, you can work directly with\n// all HTTP requests in your application, providing the ability to transform the request, retry\n// it, and more. Therefore, ErrorHandler is useful for more generic error handling, but\n// HttpInterceptor provides a much more robust way to handle errors related to the server and network.\n\n// Handling errors with HttpClient\n@Injectable()\nexport class AngularErrorHandlerService implements ErrorHandler {\n\n  constructor(private loggingService: LoggerService, private notificationService: NotificationService) { }\n\n  message: string;\n  stackTrace: string;\n\n  handleError(error: HttpErrorResponse | Error): void {\n    console.log('in error handler custom error type is: ' + '\\n');\n    if (error instanceof HttpErrorResponse) {\n      console.log('httperrorresponse is def handled in interceptors');\n      this.message = ErrorFunctions.getServerMessage(error);\n      this.stackTrace = ErrorFunctions.getServerStack(error);\n    } else {\n      this.message = ErrorFunctions.getClientMessage(error);\n      this.stackTrace = ErrorFunctions.getClientStack(error);\n      this.notificationService.showError(this.message);\n    }\n\n    this.loggingService.logError(error as Error);\n\n  }\n}\n","import { HttpErrorResponse } from '@angular/common/http';\n\nexport function getClientMessage(error: Error): string {\n  if (!navigator.onLine) {\n    return 'No Internet Connection';\n  }\n  return error.message ? error.message : error.toString();\n}\n\nexport function getClientStack(error: Error): string {\n  return error.stack;\n}\n\nexport function getServerMessage(error: HttpErrorResponse): string {\n  return error.message;\n}\n\nexport function getServerStack(error: HttpErrorResponse): string {\n  // handle stack trace\n  return 'stack';\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule\n  ]\n})\nexport class FakeHttpErrorModule { }\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FakeHttpErrorService {\n\n  constructor(private http: HttpClient) { }\n\n  fake(): Observable<{}> {\n    return this.http.get('http://www.zhgdsfdsfsdf.com');\n  }\n}\n","import { Action } from '@ngrx/store';\n\nexport enum ActionTypes {\n    FAKE_HTTP_ERROR_REQUEST = '[My Feature] Fake Http Error Request',\n    FAKE_HTTP_ERROR_REQUEST_FAILURE = '[My Feature] Fake Http Error Request Failure',\n}\n\nexport class FakeHttpErrorRequestAction implements Action {\n    readonly type: ActionTypes.FAKE_HTTP_ERROR_REQUEST = ActionTypes.FAKE_HTTP_ERROR_REQUEST;\n}\n\nexport class FakeHttpErrorRequestFailureAction implements Action {\n  readonly type: ActionTypes.FAKE_HTTP_ERROR_REQUEST_FAILURE = ActionTypes.FAKE_HTTP_ERROR_REQUEST_FAILURE;\n}\n\n\nexport type Actions =\n    | FakeHttpErrorRequestAction\n    | FakeHttpErrorRequestFailureAction;\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { FakeHttpErrorService } from '../fake-http-error.service';\nimport * as featureActions from './actions';\n\n@Injectable()\nexport class FakeHttpErrorEffects {\n  constructor(private fakeHttpService: FakeHttpErrorService, private actions$: Actions) { }\n\n  @Effect()\n  fakeHttpErrorRequestEffect$: Observable<Action> = this.actions$.pipe(\n    ofType<featureActions.FakeHttpErrorRequestAction>(\n      featureActions.ActionTypes.FAKE_HTTP_ERROR_REQUEST\n    ),\n    switchMap(() =>\n      this.fakeHttpService\n        .fake()\n        .pipe(\n          map((x) => null),\n          catchError(err => of(new featureActions.FakeHttpErrorRequestFailureAction()))\n        )\n    )\n  );\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { FakeHttpErrorEffects } from './effects';\nimport { featureReducer } from './reducer';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    StoreModule.forFeature('fakeHttpErrorFeature', featureReducer),\n    EffectsModule.forFeature([FakeHttpErrorEffects])\n  ]\n})\nexport class FakeHttpErrorSliceModule { }\n","import { Actions, ActionTypes } from './actions';\nimport { initialState, State } from './state';\n\nexport function featureReducer(state: State = initialState, action: Actions): State {\n  switch (action.type) {\n    case ActionTypes.FAKE_HTTP_ERROR_REQUEST:\n      return {\n        ...state,\n        appHttpLoading: {\n          isLoading: true,\n          isLoaded: false\n        }\n      };\n    case ActionTypes.FAKE_HTTP_ERROR_REQUEST_FAILURE:\n      return {\n        ...state,\n        appHttpLoading: {\n          isLoading: false,\n          isLoaded: false\n        }\n      };\n    default: {\n      return state;\n    }\n  }\n}\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector\n} from '@ngrx/store';\n\nimport { State } from './state';\n\nconst getIsLoading = (state: State): boolean => state.appHttpLoading.isLoading;\n\nconst getIsLoaded = (state: State): boolean => state.appHttpLoading.isLoaded;\n\n// tslint:disable-next-line: no-any\nconst getFakeData = (state: State): any => state.fakeData;\n\nexport const selectFakeHttpErrorState: MemoizedSelector<\n  object,\n  State\n> = createFeatureSelector<State>('fakeHttpErrorFeature');\n\nexport const selectFakeHttpErrorIsLoading: MemoizedSelector<\n  object,\n  boolean\n> = createSelector(\n  selectFakeHttpErrorState,\n  getIsLoading\n);\n\nexport const selectFakeHttpErrorIsLoaded: MemoizedSelector<\n  object,\n  boolean\n> = createSelector(\n  selectFakeHttpErrorState,\n  getIsLoaded\n);\n\nexport const selectFakeHttpError: MemoizedSelector<\n  object,\n  // tslint:disable-next-line: no-any\n  any\n> = createSelector(\n  selectFakeHttpErrorState,\n  getFakeData\n);\n","import { AppHttpLoading } from '../../app-http-loading/app-http-loading.interface';\n\nexport interface State {\n  // tslint:disable-next-line: no-any\n  fakeData: any;\n  appHttpLoading: AppHttpLoading;\n}\n\nexport const initialState: State = {\n  fakeData: null,\n  appHttpLoading: {\n    isLoading: false,\n    isLoaded: false\n  }\n};\n","import {\n  HttpErrorResponse, HttpEvent, HttpHandler,\n  HttpInterceptor, HttpRequest\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\n\n@Injectable()\nexport class AuthenticationErrorInterceptor implements HttpInterceptor {\n\n  // tslint:disable-next-line: no-any\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n    return next.handle(request).pipe(\n      retry(1),\n      catchError((error: HttpErrorResponse) => {\n        if (error.status === 401) {\n          // refresh token\n        } else {\n          return throwError(error);\n        }\n      })\n    );\n  }\n}\n","import {\n  HttpErrorResponse, HttpEvent, HttpHandler,\n  HttpInterceptor, HttpRequest, HttpResponse\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, retry, tap } from 'rxjs/operators';\nimport * as HttpErrorActions from 'src/app/routes/http-error/slice/actions';\nimport * as RootStoreState from '../../shared/root-store/root-state';\nimport * as AppHttpLoadingActions from '../app-http-loading/slice/actions';\nimport { NotificationService } from '../notification.service';\n\n// One traditional way of handling errors in Angular is to provide an ErrorHandler class.\n// This class can be extended to create your own global error handler. This is also a useful\n// way to handle all errors that occur, but is mostly useful for tracking error logs. For\n// reference, you can check our earlier tutorial on how to use ErrorHandler in Angular 2+.\n\n// By implementing error handling in HttpClient or HttpInterceptor, you can work directly with\n// all HTTP requests in your application, providing the ability to transform the request, retry\n// it, and more. Therefore, ErrorHandler is useful for more generic error handling, but\n// HttpInterceptor provides a much more robust way to handle errors related to the server and network.\n\n@Injectable()\nexport class ServerErrorInterceptor implements HttpInterceptor {\n\n  constructor(private store: Store<RootStoreState.State>, private notificationService: NotificationService) { }\n\n  // tslint:disable-next-line: no-any\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n    if (request instanceof HttpRequest) {\n      console.log('--------> http HttpRequest dispatch loading spinner');\n      this.store.dispatch(new AppHttpLoadingActions.StartLoadingAction());\n    }\n\n    return next.handle(request).pipe(\n      retry(1),\n      // tslint:disable-next-line: no-any\n      tap((event: HttpEvent<any>) => {\n\n        if (event instanceof HttpResponse) {\n          console.log('--------> http HttpResponse dispatch stop loading spinner');\n          this.store.dispatch(new AppHttpLoadingActions.StopLoadingAction());\n        }\n      }),\n      catchError((error: HttpErrorResponse) => {\n        console.log('--------> http HttpErrorResponse dispatch stop loading spinner');\n        this.store.dispatch(new AppHttpLoadingActions.StopLoadingAction());\n        let errorMessage = '';\n        if (error.error instanceof ErrorEvent) {\n          // A client-side htttp or network error occurred. Handle it accordingly.\n          errorMessage = `Error: ${error.error.message}`;\n          this.notificationService.showError('error.error.message');\n        } else {\n          // here an actual server response was received.\n          // The backend returned an unsuccessful response code.\n          // The response body may contain clues as to what went wrong,\n          this.store.dispatch(new HttpErrorActions.HttpErrorAction({ httpError: error }));\n\n          errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n        }\n        return throwError(error);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoggerService {\n\n  constructor() { }\n\n  logError(err: Error): void {\n    this.logToLocalStorage(err);\n    this.logToSessionStorage(err);\n    this.logToRemoteLogger(err);\n\n  }\n\n  private logToLocalStorage(err: Error): void {\n    // here log proper localStorage keys\n    const _stack = err.stack;\n  }\n\n\n  private logToSessionStorage(err: Error): void {\n    // here log proper sessionStorage keys\n    const _stack = err.stack;\n  }\n\n  private logToRemoteLogger(err: Error): void {\n    // log remote tracker such as Slack or Sentry\n    const _stack = err.stack;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationService {\n\n  constructor(private snackBar: MatSnackBar) { }\n\n  showSuccess(message: string): void {\n    this.snackBar.open(message, null, { duration: 2500, panelClass: ['snackbar-no-error'] });\n  }\n\n  showError(message: string): void {\n    // The second parameter is the text in the button.\n    // In the third, we send in the css class for the snack bar.\n    this.snackBar.open(message, null, { duration: 2500, panelClass: ['snackbar-error'] });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { HttpErrorSliceModule } from 'src/app/routes/http-error/slice/http-error-slice.module';\nimport { LoginFormSliceModule } from '../../routes/login/login-form/slice/login-form-slice.module';\nimport { LoginSliceModule } from '../../routes/login/slice/login-slice.module';\nimport { ProductsSliceModule } from '../../routes/products/slice/products-slice.module';\nimport { AppHttpLoadingSliceModule } from '../app-http-loading/slice/app-http-loading-slice.module';\nimport { FakeHttpErrorSliceModule } from '../fake-http-error/slice/fake-http-error-slice.module';\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    HttpErrorSliceModule,\n    LoginSliceModule,\n    LoginFormSliceModule,\n    ProductsSliceModule,\n    FakeHttpErrorSliceModule,\n    AppHttpLoadingSliceModule,\n    StoreModule.forRoot({}),\n    EffectsModule.forRoot([])\n  ]\n})\nexport class RootStoreModule { }\n","/*\n  TEMPORARY FILE. CAN BE REMOVED ONCE REAL HTTP IS ACTIVATED\n*/\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { createSelector, MemoizedSelector } from '@ngrx/store';\nimport * as HttpErrorSelectors from '../../routes/http-error/slice/selectors';\nimport * as LoginSelectors from '../../routes/login/slice/selectors';\nimport * as ProductsSelectors from '../../routes/products/slice/selectors';\nimport * as FakeHttpErrorSelectors from '../fake-http-error/slice/selectors';\n\nexport const selectHttpError: MemoizedSelector<\n  object,\n  HttpErrorResponse\n> = createSelector(\n  HttpErrorSelectors.selectHttpError,\n  (httpError: HttpErrorResponse) => {\n    return httpError;\n  }\n);\n\nexport const selectIsLoading: MemoizedSelector<\n  object,\n  boolean\n> = createSelector(\n  LoginSelectors.selectLoginIsLoading,\n  ProductsSelectors.selectProductsIsLoading,\n  FakeHttpErrorSelectors.selectFakeHttpErrorIsLoading,\n  (loginIsLoading: boolean = false, productsIsLoading: boolean = false, fakeHttpErrorIsLoading: boolean = false) => {\n    return loginIsLoading || productsIsLoading || fakeHttpErrorIsLoading;\n  }\n);\n\nexport const selectIsLoaded: MemoizedSelector<\n  object,\n  boolean\n> = createSelector(\n  LoginSelectors.selectLoginIsLoaded,\n  ProductsSelectors.selectProductsIsLoaded,\n  FakeHttpErrorSelectors.selectFakeHttpErrorIsLoaded,\n  (loginIsLoaded: boolean = false, productsIsLoaded: boolean = false, fakeHttpErrorIsLoaded: boolean = false) => {\n    return loginIsLoaded || productsIsLoaded || fakeHttpErrorIsLoaded;\n  }\n);\n\n\n","import { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http/http';\nimport { ErrorHandler, NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpErrorModule } from '../routes/http-error/http-error.module';\nimport { LoginModule } from '../routes/login/login.module';\nimport { ProductsModule } from '../routes/products/products.module';\nimport { AppHttpLoadingModule } from './app-http-loading/app-http-loading.module';\nimport { AppMaterialModule } from './app-material.module';\nimport { AngularErrorHandlerService } from './errors/angular-error-handler.service';\nimport { FakeHttpErrorModule } from './fake-http-error/fake-http-error.module';\nimport { AuthenticationErrorInterceptor } from './interceptors/authentication-error.interceptor';\nimport { ServerErrorInterceptor } from './interceptors/server-error.interceptor';\nimport { RootStoreModule } from './root-store/root-store.module';\nimport { TopBarModule } from './top-bar/top-bar.module';\n\n@NgModule({\n  exports: [TopBarModule, AppHttpLoadingModule],\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    FormsModule,\n    ReactiveFormsModule,\n    AppMaterialModule,\n    FakeHttpErrorModule,\n    ProductsModule,\n    LoginModule,\n    HttpErrorModule,\n    RootStoreModule\n  ],\n  providers: [\n    { provide: ErrorHandler, useClass: AngularErrorHandlerService },\n    { provide: HTTP_INTERCEPTORS, useClass: ServerErrorInterceptor, multi: true },\n    { provide: HTTP_INTERCEPTORS, useClass: AuthenticationErrorInterceptor, multi: true }\n  ]\n})\nexport class SharedModule { }\n","<a [routerLink]=\"['/']\">\n    <h1>My Store</h1>\n</a>\n\n<button [routerLink]=\"['/cart']\" mat-raised-button class=\"top-bar-item\"><i class=\"material-icons\">shopping_cart</i>Checkout</button>\n\n<button\n  [disabled]=\"!(user$ | async)\"\n  mat-raised-button\n  class=\"http-error top-bar-item\"\n  (click)=\"causeHttpError()\">\n  <i class=\"material-icons\">error</i>\n  fake http error\n</button>\n<button\n  mat-raised-button\n  class=\"top-bar-item\"\n  (click)=\"causePureError()\">\n  <i class=\"material-icons\">error</i>\n  fake general error\n</button>\n<button\n  mat-raised-button\n  class=\"top-bar-item\"\n  (click)=\"logout()\">\n  <i class=\"material-icons\">account_circle</i>\n  Logout\n</button>\n\n","import { HttpClient } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\n\nimport { Observable } from 'rxjs';\nimport * as LoginActions from '../../routes/login/slice/actions';\nimport * as LoginSelectors from '../../routes/login/slice/selectors';\nimport * as FakeHttpErrorActions from '../../shared/fake-http-error/slice/actions';\nimport * as RootStoreState from '../../shared/root-store/root-state';\nimport { User } from '../user.interface';\n\n@Component({\n  selector: 'crud-seed-top-bar',\n  templateUrl: './top-bar.component.html',\n  styleUrls: ['./top-bar.component.scss']\n})\nexport class TopBarComponent implements OnInit {\n\n  user$: Observable<User>;\n\n  constructor(private store: Store<RootStoreState.State>, private http: HttpClient) { }\n\n  ngOnInit(): void {\n    this.user$ = this.store.select(\n      LoginSelectors.selectLoginUser\n    );\n  }\n\n  logout(): void {\n    this.store.dispatch(new LoginActions.LogoutRequestAction());\n  }\n\n  causeHttpError(): void {\n    this.store.dispatch(new FakeHttpErrorActions.FakeHttpErrorRequestAction());\n  }\n\n  causePureError(): void {\n    throw new Error('My pure Error');\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AppRoutingModule } from 'src/app/app-routing.module';\nimport { AppMaterialModule } from '../app-material.module';\nimport { TopBarComponent } from './top-bar.component';\n\n@NgModule({\n  declarations: [TopBarComponent],\n  exports: [TopBarComponent],\n  imports: [\n    CommonModule,\n    AppRoutingModule,\n    AppMaterialModule\n  ]\n})\nexport class TopBarModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}