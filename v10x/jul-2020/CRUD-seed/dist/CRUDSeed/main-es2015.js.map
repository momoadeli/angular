{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.html","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/routes/http-error/http-error.component.html","./src/app/routes/http-error/http-error.component.ts","./src/app/routes/http-error/http-error.module.ts","./src/app/routes/http-error/slice/actions.ts","./src/app/routes/http-error/slice/http-error-slice.module.ts","./src/app/routes/http-error/slice/reducer.ts","./src/app/routes/http-error/slice/selectors.ts","./src/app/routes/http-error/slice/state.ts","./src/app/routes/login/login-form/login-form.component.html","./src/app/routes/login/login-form/login-form.component.ts","./src/app/routes/login/login-form/login-form.module.ts","./src/app/routes/login/login-form/login-form.service.ts","./src/app/routes/login/login-form/slice/actions.ts","./src/app/routes/login/login-form/slice/login-form-slice.module.ts","./src/app/routes/login/login-form/slice/reducer.ts","./src/app/routes/login/login-form/slice/selectors.ts","./src/app/routes/login/login-form/slice/state.ts","./src/app/routes/login/login.component.html","./src/app/routes/login/login.component.ts","./src/app/routes/login/login.fake.ts","./src/app/routes/login/login.module.ts","./src/app/routes/login/login.service.ts","./src/app/routes/login/slice/actions.ts","./src/app/routes/login/slice/effects.ts","./src/app/routes/login/slice/login-slice.module.ts","./src/app/routes/login/slice/reducer.ts","./src/app/routes/login/slice/selectors.ts","./src/app/routes/login/slice/state.ts","./src/app/routes/products/product-list/product-list.component.html","./src/app/routes/products/product-list/product-list.component.ts","./src/app/routes/products/products.module.ts","./src/app/routes/products/products.service.ts","./src/app/routes/products/slice/actions.ts","./src/app/routes/products/slice/effects.ts","./src/app/routes/products/slice/products-slice.module.ts","./src/app/routes/products/slice/reducer.ts","./src/app/routes/products/slice/selectors.ts","./src/app/routes/products/slice/state.ts","./src/app/shared/app-http-loading/app-http-loading.component.html","./src/app/shared/app-http-loading/app-http-loading.component.ts","./src/app/shared/app-http-loading/app-http-loading.module.ts","./src/app/shared/app-http-loading/slice/actions.ts","./src/app/shared/app-http-loading/slice/app-http-loading-slice.module.ts","./src/app/shared/app-http-loading/slice/reducer.ts","./src/app/shared/app-http-loading/slice/selectors.ts","./src/app/shared/app-http-loading/slice/state.ts","./src/app/shared/app-material.module.ts","./src/app/shared/errors/angular-error-handler.service.ts","./src/app/shared/errors/translate-errors.ts","./src/app/shared/fake-http-error/fake-http-error.module.ts","./src/app/shared/fake-http-error/fake-http-error.service.ts","./src/app/shared/fake-http-error/slice/actions.ts","./src/app/shared/fake-http-error/slice/effects.ts","./src/app/shared/fake-http-error/slice/fake-http-error-slice.module.ts","./src/app/shared/fake-http-error/slice/reducer.ts","./src/app/shared/fake-http-error/slice/selectors.ts","./src/app/shared/fake-http-error/slice/state.ts","./src/app/shared/interceptors/authentication-error.interceptor.ts","./src/app/shared/interceptors/server-error.interceptor.ts","./src/app/shared/logger.service.ts","./src/app/shared/notification.service.ts","./src/app/shared/root-store/root-store.module.ts","./src/app/shared/root-store/selectors.ts","./src/app/shared/shared.module.ts","./src/app/shared/top-bar/top-bar.component.html","./src/app/shared/top-bar/top-bar.component.ts","./src/app/shared/top-bar/top-bar.module.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,wE;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AAAA;AAA8E;AACd;AAC6B;AAE7F,MAAM,MAAM,GAAW;IACrB,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,4EAAc,EAAE;IACvC,EAAE,IAAI,EAAE,YAAY,EAAE,SAAS,EAAE,0FAAkB,EAAE;IACrD,EAAE,IAAI,EAAE,cAAc,EAAE,SAAS,EAAE,yGAAoB,EAAE;CAC1D,CAAC;AAMK,MAAM,gBAAgB;CAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kGChBjC,mmBAAmB,IACnB,gnBAAmB,IAEnB,uHAAK,KACH,yjBAAe,yBAJjB,YAAmB,GACnB,YAAmB,GAGjB,YAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+B;AACY;AAC+B;AACT;AAS1D,MAAM,YAAY;IAGvB,YAAoB,KAAkC,EAAU,MAAc;QAA1D,UAAK,GAAL,KAAK,CAA6B;QAAU,WAAM,GAAN,MAAM,CAAQ;QAF9E,aAAQ,GAAqB,IAAI,4CAAO,EAAW,CAAC;QAIpD,oCAAoC;QACpC,UAAK,GAAG,yBAAyB,CAAC;IAHgD,CAAC;IAKnF,QAAQ;QACN,IAAI,CAAC,KAAK,CAAC,MAAM,CACf,kFAAkC,CACnC,CAAC,IAAI,CAAC,gEAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC7B,SAAS,CAAC,CAAC,SAA4B,EAAE,EAAE;YAC1C,IAAI,SAAS,EAAE;gBACb,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;aACvC;QACH,CAAC,CAAC,CAAC;QAEL,IAAI,CAAC,KAAK,CAAC,MAAM,CACf,6EAA8B,CAC/B,CAAC,IAAI,CAAC,gEAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC7B,SAAS,CAAC,CAAC,IAAU,EAAE,EAAE;YACxB,IAAI,CAAC,IAAI,EAAE;gBACT,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC5B,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;aACxB;iBAAM;gBACL,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;aACzC;QACH,CAAC,CAAC,CAAC;IACP,CAAC;IAED,WAAW;QACT,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;IAC3B,CAAC;CACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/BD;AAAA;AAAO,MAAM,SAAS;CAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wGCpB1B,yJAAkC,KAChC,gpBAAwD,IACtD,sgBAAiB,IACf,uTAAgB,sFAAU,MAC1B,gUAAmB,uGAA2B,MAGhD,+TAAkB,IAChB,sHAAG,sJAA0B,kFAAK,MAAI,6EAAqB,MAE7D,oWAAkB,IAChB,kJAA2B,KACzB,uTAGqB,YAAnB;;wBAAkB;MAHpB,0mBAGqB,iFAErB,2BAHE,yBAAe,EAFjB,aAGqB,EADnB,SAAe,mDAbvB,wIAAwD,GAOd,8DAAqB,GAE7D,sHAAkB,GAEd,oPAGqB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACX7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+B;AACY;AACsB;AAET;AAOjD,MAAM,kBAAkB;IAO7B,YAAoB,KAAkC,EAAU,MAAc;QAA1D,UAAK,GAAL,KAAK,CAA6B;QAAU,WAAM,GAAN,MAAM,CAAQ;QAL9E,aAAQ,GAAqB,IAAI,4CAAO,EAAW,CAAC;QAEpD,gDAAgD;QAChD,qBAAgB,GAAW,qBAAqB,CAAC;IAEiC,CAAC;IAEnF,QAAQ;QACN,IAAI,CAAC,KAAK,CAAC,MAAM,CACf,gEAAkC,CACnC,CAAC,IAAI,CAAC,gEAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC7B,SAAS,CAAC,CAAC,SAA4B,EAAE,EAAE;YAC1C,IAAI,SAAS,EAAE;gBACb,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;gBACvB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;gBAC3B,IAAI,CAAC,gBAAgB,GAAG,SAAS,CAAC,OAAO,CAAC;aAC3C;QACH,CAAC,CAAC,CAAC;IACP,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,+EAAgC,EAAE,CAAC,CAAC;IAC9D,CAAC;IAED,WAAW;QACT,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;IAC3B,CAAC;CAEF;;;;;;;;;;;;;AC/BD;AAAA;AAAO,MAAM,eAAe;CAAI;;;;;;;;;;;;;ACZhC;AAAA;AAAA;AAAA;AAAA,IAAY,WAGX;AAHD,WAAY,WAAW;IACnB,qDAAsC;IACtC,iEAAkD;AACtD,CAAC,EAHW,WAAW,KAAX,WAAW,QAGtB;AAEM,MAAM,eAAe;IAExB,YAAmB,OAAyC;QAAzC,YAAO,GAAP,OAAO,CAAkC;QADnD,SAAI,GAA2B,WAAW,CAAC,UAAU,CAAC;IACC,CAAC;CACpE;AAEM,MAAM,oBAAoB;IAAjC;QACW,SAAI,GAAiC,WAAW,CAAC,gBAAgB,CAAC;IAC7E,CAAC;CAAA;;;;;;;;;;;;;ACHD;AAAA;AAAO,MAAM,oBAAoB;CAAI;;;;;;;;;;;;;ACZrC;AAAA;AAAA;AAAA;AAAiD;AACH;AAEvC,SAAS,cAAc,CAAC,QAAe,mDAAY,EAAE,MAAe;IACzE,QAAQ,MAAM,CAAC,IAAI,EAAE;QACnB,KAAK,oDAAW,CAAC,UAAU;YACzB,uCACK,KAAK,KACR,SAAS,EAAE,MAAM,CAAC,OAAO,CAAC,SAAS,IACnC;QACJ,KAAK,oDAAW,CAAC,gBAAgB;YAC/B,uCACK,KAAK,GACL,mDAAY,EACf;QACJ,OAAO,CAAC,CAAC;YACP,OAAO,KAAK,CAAC;SACd;KACF;AACH,CAAC;;;;;;;;;;;;;ACnBD;AAAA;AAAA;AAAA;AAAA;AAIqB;AAKrB,MAAM,YAAY,GAAG,CAAC,KAAY,EAAqB,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC;;AAEnE,MAAM,oBAAoB,GAG7B,yEAAqB,CAAQ,kBAAkB,CAAC,CAAC;AAE9C,MAAM,eAAe,GAGxB,kEAAc,CAChB,oBAAoB,EACpB,YAAY,CACb,CAAC;;;;;;;;;;;;;;ACfF;AAAA;AAAO,MAAM,YAAY,GAAU;IACjC,SAAS,EAAE,IAAI;CAChB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wGCTF;;;;;;kzBAAiD,IAC/C,wHAAK,KACH,u2FAAgB,MAEd;;;;;;;;;;;;;;;;;;;;;+0EAA+D,KAC/D,qWAAU,0FAA2B,MACrC,kVAAW,0FAA2B,MAI1C,yHAAK,KACH,k3FAAgB,MAEd;;;;;;;;;;;;;;;;;;;;;i1EAA+D,KAC/D,sWAAU,+FAAgC,MAC1C,mVAAW,+FAAgC,MAK/C,iJAA0B,KACxB,uTAI2B,YAAzB;;wBAAwB;MAJ1B,yoBAI2B,IACzB,8IAA0B,2FAAc,MAAI,2EAC9C,mDA3BE,mBAAuB,YAA7B,YAAiD,EAA3C,SAAuB,GAIkB,sBAAqB,EAA9D,aAA+D,EAAtB,UAAqB,GAA9C,6BAAwB,EAAxC,aAA+D,EAA/C,UAAwB,GASC,sBAAqB,EAA9D,aAA+D,EAAtB,UAAqB,GAA9C,6BAAwB,EAAxC,aAA+D,EAA/C,UAAwB,GAWxC,qBAA8B,oBAD9B,2BAAe,EAFjB,aAI2B,EADzB,WAA8B,EAD9B,WAAe,mDAvBrB,8sBAAiD,GAE7C,y4EAAgB,IAEd,+sDAA+D,IAC/D,sPAAU,gEAA2B,GACrC,yGAAW,gEAA2B,GAKxC,o6EAAgB,IAEd,+sDAA+D,IAC/D,sPAAU,gEAAgC,GAC1C,yGAAW,gEAAgC,GAM7C,4PAI2B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzB/B;AAAA;AAAA;AAAA;AAAmF;AAEnC;AAUzC,MAAM,kBAAkB;IAO7B,YAAoB,gBAAkC;QAAlC,qBAAgB,GAAhB,gBAAgB,CAAkB;QAL5C,gBAAW,GAAwB,IAAI,0DAAY,EAAS,CAAC;QAEvE,cAAS,GAA2B,2DAAe,CAAC;QACpD,cAAS,GAAc,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC;IAEG,CAAC;IAE3D,QAAQ;QACN,6DAA6D;QAC7D,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;IACzB,CAAC;IAED,MAAM,CAAC,EAAS;QACd,sFAAsF;QACtF,IAAI,CAAC,WAAW,CAAC,IAAI,CACnB,EAAE,GAAG,EAAE,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK;YACxD,QAAQ,EAAE,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK;SAC9D,CACF,CAAC;IACJ,CAAC;IAED,WAAW;IAEX,CAAC;CAEF;;;;;;;;;;;;;ACxBD;AAAA;AAAO,MAAM,eAAe;CAAI;;;;;;;;;;;;;ACdhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoE;AAErC;AAC+B;AAIV;AACI;AAGjD,MAAM,gBAAgB;IAc3B,YAAoB,EAAe,EAAU,KAAkC;QAA3D,OAAE,GAAF,EAAE,CAAa;QAAU,UAAK,GAAL,KAAK,CAA6B;QAZ/E,aAAQ,GAAqB,IAAI,4CAAO,EAAW,CAAC;QAEpD,eAAU,GAAc,IAAI,CAAC;QAW3B,IAAI,CAAC,QAAQ,EAAE,CAAC;QAChB,IAAI,CAAC,4BAA4B,EAAE,CAAC;IAEtC,CAAC;IAZD,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED,IAAI,SAAS,CAAC,IAAe;QAC3B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;IACzB,CAAC;IAQD,WAAW;QACT,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;IAC3B,CAAC;IAED,QAAQ;QAEN,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YAC7B,GAAG,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YAC9B,GAAG,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;SAC/B,CAAC,CAAC;QAEH,IAAI,CAAC,SAAS,CAAC,YAAY;aACxB,IAAI,CACH,mFAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CACzB;aACA,SAAS,CAAC,CAAC,KAAY,EAAE,EAAE;YAC1B,sDAAsD;YACtD,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,8DAAgC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;QACvE,CAAC,CAAC,CAAC;IAEP,CAAC;IAED,4BAA4B;QAC1B,IAAI,CAAC,KAAK,CAAC,MAAM,CACf,4DAA8B,CAC/B;aACE,IAAI,CACH,mFAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CACzB,CAAC,SAAS,CAAC,CAAC,IAAU,EAAE,EAAE;YACzB,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC;QACxD,CAAC,CAAC,CAAC;IAEP,CAAC;CAEF;;;;;;;;;;;;;AC/DD;AAAA;AAAA;AAAA,IAAY,WAEX;AAFD,WAAY,WAAW;IACnB,mEAAoD;AACxD,CAAC,EAFW,WAAW,KAAX,WAAW,QAEtB;AAEM,MAAM,eAAe;IAExB,YAAmB,OAAwB;QAAxB,YAAO,GAAP,OAAO,CAAiB;QADlC,SAAI,GAAkC,WAAW,CAAC,iBAAiB,CAAC;IAC9B,CAAC;CACnD;;;;;;;;;;;;;ACCD;AAAA;AAAO,MAAM,oBAAoB;CAAI;;;;;;;;;;;;;ACZrC;AAAA;AAAA;AAAA;AAAiD;AACH;AAGvC,SAAS,cAAc,CAAC,QAAe,mDAAY,EAAE,MAAe;IACzE,QAAQ,MAAM,CAAC,IAAI,EAAE;QACnB,KAAK,oDAAW,CAAC,iBAAiB;YAChC,uCACK,KAAK,KACR,KAAK,EAAE,MAAM,CAAC,OAAO,CAAC,KAAK,IAC3B;QACJ,OAAO,CAAC,CAAC;YACP,OAAO,KAAK,CAAC;SACd;KACF;AACH,CAAC;;;;;;;;;;;;;ACfD;AAAA;AAAA;AAAA;AAAA;AAIqB;AAMrB,MAAM,QAAQ,GAAG,CAAC,KAAY,EAAS,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC;;AAE/C,MAAM,gBAAgB,GAGzB,yEAAqB,CAAQ,kBAAkB,CAAC,CAAC;AAE9C,MAAM,WAAW,GAGpB,kEAAc,CAChB,gBAAgB,EAChB,QAAQ,CACT,CAAC;;;;;;;;;;;;;;ACjBF;AAAA;AAAO,MAAM,YAAY,GAAU;IACjC,KAAK,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE;CACjC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oGCRF,mJAA6B,KAC3B,+oBAAmC,IACjC,6TAAkB,IAChB,kMAAqD,YAA/B;;wBAA8B;MAApD,62BAAqD,2BAFzD,wIAAmC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACErC;AAAA;AAAA;AAAuD;AAOhD,MAAM,cAAc;IAEzB,YAAoB,KAAkC;QAAlC,UAAK,GAAL,KAAK,CAA6B;IAAI,CAAC;IAE3D,QAAQ;IACR,CAAC;IAED,YAAY;QACV,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,uEAA+B,EAAE,CAAC,CAAC;IAC7D,CAAC;IAED,WAAW;IACX,CAAC;CAEF;;;;;;;;;;;;;ACxBD;AAAA;AAAA,IAAY,eAGX;AAHD,WAAY,eAAe;IACzB,kCAAe;IACf,+BAAY;AACd,CAAC,EAHW,eAAe,KAAf,eAAe,QAG1B;;;;;;;;;;;;;ACcD;AAAA;AAAO,MAAM,WAAW;CAAI;;;;;;;;;;;;;ACf5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsC;AACM;;;AAMrC,MAAM,YAAY;IAEvB,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAI,CAAC;IAEzC,KAAK,CAAC,GAAW,EAAE,QAAgB;QAEjC,uFAAuF;QACvF,WAAW;QACX,uEAAuE;QACvE,OAAO;QAEP,0DAA0D;QAC1D,WAAW;QACX,uEAAuE;QACvE,OAAO;QAEP,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,iCAAiC,CAAC;YACrD,mCAAmC;aAClC,IAAI,CAAC,0DAAG,CAAE,CAAC,GAAQ,EAAE,EAAE,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;IACxC,CAAC;IAED,MAAM;QAEJ,OAAO,+CAAE,CAAC,EAAE,CAAC;aACV,IAAI,CACH,4DAAK,CAAC,IAAI,CAAC,CAAC,oDAAoD;QACpD,iCAAiC;SAC9C,CAAC;IACN,CAAC;;;;;;;;;;;;;;;AClCH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAY,WAOX;AAPD,WAAY,WAAW;IACnB,2DAA4C;IAC5C,2DAA4C;IAC5C,2DAA4C;IAC5C,6DAA8C;IAC9C,6DAA8C;IAC9C,6DAA8C;AAClD,CAAC,EAPW,WAAW,KAAX,WAAW,QAOtB;AAEM,MAAM,kBAAkB;IAA/B;QACa,SAAI,GAA8B,WAAW,CAAC,aAAa,CAAC;IACzE,CAAC;CAAA;AAEM,MAAM,kBAAkB;IAE3B,YAAmB,OAAiC;QAAjC,YAAO,GAAP,OAAO,CAA0B;QAD3C,SAAI,GAA8B,WAAW,CAAC,aAAa,CAAC;IACb,CAAC;CAC5D;AAEM,MAAM,kBAAkB;IAE3B,YAAmB,OAAuB;QAAvB,YAAO,GAAP,OAAO,CAAgB;QADjC,SAAI,GAA8B,WAAW,CAAC,aAAa,CAAC;IACvB,CAAC;CAClD;AAEM,MAAM,mBAAmB;IAAhC;QACW,SAAI,GAA+B,WAAW,CAAC,cAAc,CAAC;IACzE,CAAC;CAAA;AAEM,MAAM,mBAAmB;IAAhC;QACW,SAAI,GAA+B,WAAW,CAAC,cAAc,CAAC;IACzE,CAAC;CAAA;AAEM,MAAM,mBAAmB;IAE9B,YAAmB,OAAiC;QAAjC,YAAO,GAAP,OAAO,CAA0B;QAD3C,SAAI,GAA+B,WAAW,CAAC,cAAc,CAAC;IACf,CAAC;CAC1D;;;;;;;;;;;;;;;;;;;;;ACpCuD;AAGa;AAEQ;AAEjC;AAGrC,MAAM,YAAY;IACvB,YAAoB,YAA0B,EAAU,QAAiB,EAAU,KAAkC;QAAjG,iBAAY,GAAZ,YAAY,CAAc;QAAU,aAAQ,GAAR,QAAQ,CAAS;QAAU,UAAK,GAAL,KAAK,CAA6B;QAGrH,wBAAmB,GAAuB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAC1D,4DAAM,CACJ,oDAA0B,CAAC,aAAa,CACzC,EACD,qEAAc,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAC9B,6EAA8B,CAC/B,CAAC,EACF,gEAAS,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE,EAAE,CACtB,IAAI,CAAC,YAAY;aACd,KAAK,CAAC,KAAK,CAAC,GAAG,EAAE,KAAK,CAAC,QAAQ,CAAC;aAChC,IAAI,CACH,0DAAG,CAAE,CAAC,CAAC,EAAE;YACP,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACjB,CAAC,CAAC,EACF,0DAAG,CACD,IAAI,CAAC,EAAE,CACL,IAAI,2DAAiC,CAAC;YACpC,IAAI;SACL,CAAC,CACL,CACF,CACJ,CACF,CAAC;QAGF,yBAAoB,GAAuB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAC3D,4DAAM,CACJ,oDAA0B,CAAC,cAAc,CAC1C,EACD,gEAAS,CAAC,GAAG,EAAE,CACb,IAAI,CAAC,YAAY;aACd,MAAM,EAAE;aACR,IAAI,CACH,0DAAG,CACD,GAAG,EAAE,CACH,IAAI,4DAAkC,EAAE,CAC3C,CACF,CACJ,CACF,CAAC;IA1CuH,CAAC;CA2C3H;AAxCC;IADC,4DAAM,EAAE;yDAuBP;AAGF;IADC,4DAAM,EAAE;0DAeP;;;;;;;;;;;;;ACtCJ;AAAA;AAAO,MAAM,gBAAgB;CAAI;;;;;;;;;;;;;AChBjC;AAAA;AAAA;AAAA;AAAiD;AACH;AAEvC,SAAS,cAAc,CAAC,QAAe,mDAAY,EAAE,MAAe;IACzE,QAAQ,MAAM,CAAC,IAAI,EAAE;QACnB,KAAK,oDAAW,CAAC,aAAa;YAC5B,uCACK,KAAK,KACR,cAAc,EAAE;oBACd,SAAS,EAAE,IAAI;oBACf,QAAQ,EAAE,KAAK;iBAChB,IACD;QACJ,KAAK,oDAAW,CAAC,aAAa;YAC5B,uCACK,KAAK,KACR,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,IAAI,EACzB,cAAc,EAAE;oBACd,SAAS,EAAE,KAAK;oBAChB,QAAQ,EAAE,IAAI;iBACf,IACD;QACJ,KAAK,oDAAW,CAAC,aAAa;YAC5B,uCACK,KAAK,KACR,cAAc,EAAE;oBACd,SAAS,EAAE,KAAK;oBAChB,QAAQ,EAAE,KAAK;iBAChB,IACD;QACJ,KAAK,oDAAW,CAAC,cAAc;YAC7B,uCACK,KAAK,KACR,IAAI,EAAE,IAAI,EACV,cAAc,EAAE;oBACd,SAAS,EAAE,IAAI;oBACf,QAAQ,EAAE,KAAK;iBAChB,IACD;QACJ,KAAK,oDAAW,CAAC,cAAc;YAC7B,uCACK,KAAK,KACR,cAAc,EAAE;oBACd,SAAS,EAAE,KAAK;oBAChB,QAAQ,EAAE,KAAK;iBAChB,IACD;QACJ,KAAK,oDAAW,CAAC,cAAc;YAC7B,uCACK,KAAK,GACL,mDAAY,EACf;QACJ,OAAO,CAAC,CAAC;YACP,OAAO,KAAK,CAAC;SACd;KACF;AACH,CAAC;;;;;;;;;;;;;ACxDD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIqB;AAMrB,MAAM,YAAY,GAAG,CAAC,KAAY,EAAW,EAAE,CAAC,KAAK,CAAC,cAAc,CAAC,SAAS,CAAC;;AAE/E,MAAM,WAAW,GAAG,CAAC,KAAY,EAAW,EAAE,CAAC,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC;;AAE7E,MAAM,OAAO,GAAG,CAAC,KAAY,EAAQ,EAAE;IACrC,OAAO,KAAK,CAAC,IAAI,CAAC;AACpB,CAAC,CAAC;;AAEK,MAAM,gBAAgB,GAGzB,yEAAqB,CAAQ,cAAc,CAAC,CAAC;AAE1C,MAAM,oBAAoB,GAG7B,kEAAc,CACd,gBAAgB,EAChB,YAAY,CACf,CAAC;AAEK,MAAM,mBAAmB,GAG5B,kEAAc,CACd,gBAAgB,EAChB,WAAW,CACd,CAAC;AAEK,MAAM,eAAe,GAGxB,kEAAc,CACd,gBAAgB,EAChB,OAAO,CACV,CAAC;;;;;;;;;;;;;;ACrCF;AAAA;AAAO,MAAM,YAAY,GAAU;IACjC,IAAI,EAAE,IAAI;IACV,cAAc,EAAE;QACd,SAAS,EAAE,KAAK;QAChB,QAAQ,EAAE,KAAK;KAChB;CACF,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0GCZA,uHAA+C,KAE7C,sHAAI,yYAEJ;0GANJ,sJAAgC,KAC9B,sHAAI,qFAAQ,MACZ,sdAA+C,GAA1C,4XAAyC,cAA9C,YAA+C,EAA1C,SAAyC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACIhD;AAAA;AAAA;AAAA;AAAoD;AACI;AAOjD,MAAM,oBAAoB;IAQ/B,YAAoB,eAAgC,EAAU,KAAkC;QAA5E,oBAAe,GAAf,eAAe,CAAiB;QAAU,UAAK,GAAL,KAAK,CAA6B;IAAI,CAAC;IANrG,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CACtB,+DAAgC,CACjC,CAAC;IACJ,CAAC;IAID,QAAQ;QACN,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,oEAAqC,EAAE,CAAC,CAAC;IACnE,CAAC;CACF;;;;;;;;;;;;;ACfD;AAAA;AAAO,MAAM,cAAc;CAAI;;;;;;;;;;;;;ACT/B;AAAA;AAAA;AAAA;AAAA;AAA4C;;;AAMrC,MAAM,eAAe;IAE1B,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAI,CAAC;IAEzC,QAAQ;QAEN,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,oCAAoC,CAAC;YACxD,mCAAmC;aAClC,IAAI,CAAC,0DAAG,CAAE,CAAC,GAAQ,EAAE,EAAE;YACtB,OAAO,GAAG,CAAC,IAAI,CAAC;QAClB,CAAC,CAAC,CAAC,CAAC;IACR,CAAC;;;;;;;;;;;;;;;ACjBH;AAAA;AAAA;AAAA;AAAA;AAAA,IAAY,WAIX;AAJD,WAAY,WAAW;IACnB,iEAAkD;IAClD,iFAAkE;IAClE,iFAAkE;AACtE,CAAC,EAJW,WAAW,KAAX,WAAW,QAItB;AAEM,MAAM,qBAAqB;IAAlC;QACa,SAAI,GAAiC,WAAW,CAAC,gBAAgB,CAAC;IAC/E,CAAC;CAAA;AAEM,MAAM,4BAA4B;IAErC,YAAmB,OAAiC;QAAjC,YAAO,GAAP,OAAO,CAA0B;QAD3C,SAAI,GAAyC,WAAW,CAAC,wBAAwB,CAAC;IACnC,CAAC;CAC5D;AAEM,MAAM,4BAA4B;IAErC,YAAmB,OAAqC;QAArC,YAAO,GAAP,OAAO,CAA8B;QAD/C,SAAI,GAAyC,WAAW,CAAC,wBAAwB,CAAC;IAC/B,CAAC;CAChE;;;;;;;;;;;;;;;;;;;;ACpBuD;AAGR;AAEJ;AAGrC,MAAM,eAAe;IAC1B,YAAoB,eAAgC,EAAU,QAAiB;QAA3D,oBAAe,GAAf,eAAe,CAAiB;QAAU,aAAQ,GAAR,QAAQ,CAAS;QAG/E,2BAAsB,GAAuB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAC7D,4DAAM,CACJ,oDAA0B,CAAC,gBAAgB,CAC5C,EACD,gEAAS,CAAC,GAAG,EAAE,CACb,IAAI,CAAC,eAAe;aACjB,QAAQ,EAAE;aACV,IAAI,CACH,0DAAG,CACD,QAAQ,CAAC,EAAE,CACT,IAAI,qEAA2C,CAAC;YAC9C,QAAQ;SACT,CAAC,CACL,CACF,CACJ,CACF,CAAC;IAnBiF,CAAC;CAoBrF;AAjBC;IADC,4DAAM,EAAE;+DAiBP;;;;;;;;;;;;;ACbJ;AAAA;AAAO,MAAM,mBAAmB;CAAI;;;;;;;;;;;;;AChBpC;AAAA;AAAA;AAAA;AAAiD;AACH;AAEvC,SAAS,cAAc,CAAC,QAAe,mDAAY,EAAE,MAAe;IACzE,QAAQ,MAAM,CAAC,IAAI,EAAE;QACnB,KAAK,oDAAW,CAAC,gBAAgB;YAC/B,uCACK,KAAK,KACR,cAAc,EAAE;oBACd,SAAS,EAAE,IAAI;oBACf,QAAQ,EAAE,KAAK;iBAChB,IACD;QACJ,KAAK,oDAAW,CAAC,wBAAwB;YACvC,uCACK,KAAK,KACR,QAAQ,EAAE,MAAM,CAAC,OAAO,CAAC,QAAQ,EACjC,cAAc,EAAE;oBACd,SAAS,EAAE,KAAK;oBAChB,QAAQ,EAAE,IAAI;iBACf,IACD;QACJ,KAAK,oDAAW,CAAC,wBAAwB;YACvC,uCACK,KAAK,KACR,cAAc,EAAE;oBACd,SAAS,EAAE,KAAK;oBAChB,QAAQ,EAAE,KAAK;iBAChB,IACD;QACJ,OAAO,CAAC,CAAC;YACP,OAAO,KAAK,CAAC;SACd;KACF;AACH,CAAC;;;;;;;;;;;;;AClCD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIqB;AAMrB,MAAM,YAAY,GAAG,CAAC,KAAY,EAAW,EAAE,CAAC,KAAK,CAAC,cAAc,CAAC,SAAS,CAAC;;AAE/E,MAAM,WAAW,GAAG,CAAC,KAAY,EAAW,EAAE,CAAC,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC;;AAE7E,MAAM,WAAW,GAAG,CAAC,KAAY,EAAkB,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC;;AAE9D,MAAM,mBAAmB,GAG5B,yEAAqB,CAAQ,iBAAiB,CAAC,CAAC;AAE7C,MAAM,uBAAuB,GAGhC,kEAAc,CAChB,mBAAmB,EACnB,YAAY,CACb,CAAC;AAEK,MAAM,sBAAsB,GAG/B,kEAAc,CAChB,mBAAmB,EACnB,WAAW,CACZ,CAAC;AAEK,MAAM,cAAc,GAGvB,kEAAc,CAChB,mBAAmB,EACnB,WAAW,CACZ,CAAC;;;;;;;;;;;;;;ACnCF;AAAA;AAAO,MAAM,YAAY,GAAU;IACjC,QAAQ,EAAE,IAAI;IACd,cAAc,EAAE;QACd,SAAS,EAAE,KAAK;QAChB,QAAQ,EAAE,KAAK;KAChB;CACF,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6GCdF,kKAA8E,IAAhD,sLAA+C,KAC3E,mJAA6B,KAE3B,onCAAoC,mDAHV,kLAA+C,GAA7E,YAA8E,EAAhD,SAA+C,GAGzE,gTAAoC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACDxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqC;AAEa;AAEmB;AACU;AAOxE,MAAM,uBAAuB;IAKlC,YAAoB,KAAkC;QAAlC,UAAK,GAAL,KAAK,CAA6B;IAAI,CAAC;IAE3D,oBAAoB;IACpB,sDAAsD;IACtD,2DAA2D;IAC3D,4BAA4B;IAC5B,qDAAqD;IACrD,8DAA8D;IAC9D,0DAA0D;IAC1D,0DAA0D;IAC1D,sDAAsD;IACtD,kBAAkB;IAElB,QAAQ;QACN,oBAAoB;QACpB,qBAAqB;QACrB,oCAAoC;QACpC,KAAK;QACL,IAAI,CAAC,UAAU;YACb,IAAI,CAAC,KAAK,CAAC,MAAM,CACf,iFAAuC,CACxC,CAAC;QAEJ,IAAI,CAAC,gBAAgB,GAAG,0DAAa,CAAC;YACpC,IAAI,CAAC,KAAK,CAAC,MAAM,CACf,iFAAuC,CACxC;YACD,IAAI,CAAC,KAAK,CAAC,MAAM,CACf,4EAA+B,CAChC;SAAC,CACH,CAAC,IAAI,CAAC,uEAAG,CAAC,CAAC,CAAC,UAAU,EAAE,sBAAsB,CAAqB,EAAE,EAAE;YACtE,OAAO,UAAU,CAAC;QACpB,CAAC,CAAC,CAAC,CAAC;IACN,CAAC;CAEF;;;;;;;;;;;;;ACxCD;AAAA;AAAO,MAAM,oBAAoB;CAAI;;;;;;;;;;;;;ACXrC;AAAA;AAAA;AAAA;AAAA,IAAY,WAGX;AAHD,WAAY,WAAW;IACnB,2DAA4C;IAC5C,yDAA0C;AAC9C,CAAC,EAHW,WAAW,KAAX,WAAW,QAGtB;AAEM,MAAM,kBAAkB;IAA/B;QACa,SAAI,GAA8B,WAAW,CAAC,aAAa,CAAC;IACzE,CAAC;CAAA;AAEM,MAAM,iBAAiB;IAA9B;QACa,SAAI,GAA6B,WAAW,CAAC,YAAY,CAAC;IACvE,CAAC;CAAA;;;;;;;;;;;;;ACFD;AAAA;AAAO,MAAM,yBAAyB;CAAI;;;;;;;;;;;;;ACZ1C;AAAA;AAAA;AAAA;AAAiD;AACH;AAEvC,SAAS,cAAc,CAAC,QAAe,mDAAY,EAAE,MAAe;IACzE,QAAQ,MAAM,CAAC,IAAI,EAAE;QACnB,KAAK,oDAAW,CAAC,aAAa;YAC5B,uCACK,KAAK,KACR,cAAc,EAAE;oBACd,SAAS,EAAE,IAAI;oBACf,QAAQ,EAAE,KAAK;iBAChB,IACD;QACJ,KAAK,oDAAW,CAAC,YAAY;YAC3B,uCACK,KAAK,KACR,cAAc,EAAE;oBACd,SAAS,EAAE,KAAK;oBAChB,QAAQ,EAAE,IAAI;iBACf,IACD;QACJ,OAAO,CAAC,CAAC;YACP,OAAO,KAAK,CAAC;SACd;KACF;AACH,CAAC;;;;;;;;;;;;;ACzBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIqB;AAIrB,MAAM,YAAY,GAAG,CAAC,KAAY,EAAW,EAAE,CAAC,KAAK,CAAC,cAAc,CAAC,SAAS,CAAC;;AAE/E,MAAM,WAAW,GAAG,CAAC,KAAY,EAAW,EAAE,CAAC,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC;;AAEtE,MAAM,kBAAkB,GAG3B,yEAAqB,CAAQ,gBAAgB,CAAC,CAAC;AAE5C,MAAM,eAAe,GAGxB,kEAAc,CAChB,kBAAkB,EAClB,YAAY,CACb,CAAC;AAEK,MAAM,cAAc,GAGvB,kEAAc,CAChB,kBAAkB,EAClB,WAAW,CACZ,CAAC;;;;;;;;;;;;;;ACzBF;AAAA;AAAO,MAAM,YAAY,GAAU;IACjC,cAAc,EAAE;QACd,SAAS,EAAE,KAAK;QAChB,QAAQ,EAAE,KAAK;KAChB;CACF,CAAC;;;;;;;;;;;;;ACuBF;AAAA;AAAO,MAAM,iBAAiB;CAAI;;;;;;;;;;;;;AClClC;AAAA;AAAA;AAAA;AAAyD;AAIJ;AAErD,yFAAyF;AACzF,4FAA4F;AAC5F,yFAAyF;AACzF,0FAA0F;AAE1F,8FAA8F;AAC9F,+FAA+F;AAC/F,uFAAuF;AACvF,sGAAsG;AAEtG,kCAAkC;AAE3B,MAAM,0BAA0B;IAErC,YAAoB,cAA6B,EAAU,mBAAwC;QAA/E,mBAAc,GAAd,cAAc,CAAe;QAAU,wBAAmB,GAAnB,mBAAmB,CAAqB;IAAI,CAAC;IAKxG,WAAW,CAAC,KAAgC;QAC1C,OAAO,CAAC,GAAG,CAAC,yCAAyC,GAAG,IAAI,CAAC,CAAC;QAC9D,IAAI,KAAK,YAAY,sEAAiB,EAAE;YACtC,OAAO,CAAC,GAAG,CAAC,kDAAkD,CAAC,CAAC;YAChE,IAAI,CAAC,OAAO,GAAG,kEAA+B,CAAC,KAAK,CAAC,CAAC;YACtD,IAAI,CAAC,UAAU,GAAG,gEAA6B,CAAC,KAAK,CAAC,CAAC;SACxD;aAAM;YACL,IAAI,CAAC,OAAO,GAAG,kEAA+B,CAAC,KAAK,CAAC,CAAC;YACtD,IAAI,CAAC,UAAU,GAAG,gEAA6B,CAAC,KAAK,CAAC,CAAC;YACvD,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAClD;QAED,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,KAAc,CAAC,CAAC;IAE/C,CAAC;CACF;;;;;;;;;;;;;ACtCD;AAAA;AAAA;AAAA;AAAA;AAAO,SAAS,gBAAgB,CAAC,KAAY;IAC3C,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE;QACrB,OAAO,wBAAwB,CAAC;KACjC;IACD,OAAO,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;AAC1D,CAAC;AAEM,SAAS,cAAc,CAAC,KAAY;IACzC,OAAO,KAAK,CAAC,KAAK,CAAC;AACrB,CAAC;AAEM,SAAS,gBAAgB,CAAC,KAAwB;IACvD,OAAO,KAAK,CAAC,OAAO,CAAC;AACvB,CAAC;AAEM,SAAS,cAAc,CAAC,KAAwB;IACrD,qBAAqB;IACrB,OAAO,OAAO,CAAC;AACjB,CAAC;;;;;;;;;;;;;ACTD;AAAA;AAAO,MAAM,mBAAmB;CAAI;;;;;;;;;;;;;;;;;;;ACJ7B,MAAM,oBAAoB;IAE/B,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAI,CAAC;IAEzC,IAAI;QACF,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;IACtD,CAAC;;;;;;;;;;;;;;;ACXH;AAAA;AAAA;AAAA;AAAA,IAAY,WAGX;AAHD,WAAY,WAAW;IACnB,+EAAgE;IAChE,+FAAgF;AACpF,CAAC,EAHW,WAAW,KAAX,WAAW,QAGtB;AAEM,MAAM,0BAA0B;IAAvC;QACa,SAAI,GAAwC,WAAW,CAAC,uBAAuB,CAAC;IAC7F,CAAC;CAAA;AAEM,MAAM,iCAAiC;IAA9C;QACW,SAAI,GAAgD,WAAW,CAAC,+BAA+B,CAAC;IAC3G,CAAC;CAAA;;;;;;;;;;;;;;;;;;;;;ACZuD;AAElB;AACsB;AAEhB;AAGrC,MAAM,oBAAoB;IAC/B,YAAoB,eAAqC,EAAU,QAAiB;QAAhE,oBAAe,GAAf,eAAe,CAAsB;QAAU,aAAQ,GAAR,QAAQ,CAAS;QAGpF,gCAA2B,GAAuB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAClE,4DAAM,CACJ,oDAA0B,CAAC,uBAAuB,CACnD,EACD,gEAAS,CAAC,GAAG,EAAE,CACb,IAAI,CAAC,eAAe;aACjB,IAAI,EAAE;aACN,IAAI,CACH,0DAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,EAChB,iEAAU,CAAC,GAAG,CAAC,EAAE,CAAC,+CAAE,CAAC,IAAI,0EAAgD,EAAE,CAAC,CAAC,CAC9E,CACJ,CACF,CAAC;IAfsF,CAAC;CAgB1F;AAbC;IADC,4DAAM,EAAE;yEAaP;;;;;;;;;;;;;ACVJ;AAAA;AAAO,MAAM,wBAAwB;CAAI;;;;;;;;;;;;;ACfzC;AAAA;AAAA;AAAA;AAAiD;AACH;AAEvC,SAAS,cAAc,CAAC,QAAe,mDAAY,EAAE,MAAe;IACzE,QAAQ,MAAM,CAAC,IAAI,EAAE;QACnB,KAAK,oDAAW,CAAC,uBAAuB;YACtC,uCACK,KAAK,KACR,cAAc,EAAE;oBACd,SAAS,EAAE,IAAI;oBACf,QAAQ,EAAE,KAAK;iBAChB,IACD;QACJ,KAAK,oDAAW,CAAC,+BAA+B;YAC9C,uCACK,KAAK,KACR,cAAc,EAAE;oBACd,SAAS,EAAE,KAAK;oBAChB,QAAQ,EAAE,KAAK;iBAChB,IACD;QACJ,OAAO,CAAC,CAAC;YACP,OAAO,KAAK,CAAC;SACd;KACF;AACH,CAAC;;;;;;;;;;;;;ACzBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIqB;AAIrB,MAAM,YAAY,GAAG,CAAC,KAAY,EAAW,EAAE,CAAC,KAAK,CAAC,cAAc,CAAC,SAAS,CAAC;;AAE/E,MAAM,WAAW,GAAG,CAAC,KAAY,EAAW,EAAE,CAAC,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC;;AAE7E,mCAAmC;AACnC,MAAM,WAAW,GAAG,CAAC,KAAY,EAAO,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC;;AAEnD,MAAM,wBAAwB,GAGjC,yEAAqB,CAAQ,sBAAsB,CAAC,CAAC;AAElD,MAAM,4BAA4B,GAGrC,kEAAc,CAChB,wBAAwB,EACxB,YAAY,CACb,CAAC;AAEK,MAAM,2BAA2B,GAGpC,kEAAc,CAChB,wBAAwB,EACxB,WAAW,CACZ,CAAC;AAEK,MAAM,mBAAmB,GAI5B,kEAAc,CAChB,wBAAwB,EACxB,WAAW,CACZ,CAAC;;;;;;;;;;;;;;ACnCF;AAAA;AAAO,MAAM,YAAY,GAAU;IACjC,QAAQ,EAAE,IAAI;IACd,cAAc,EAAE;QACd,SAAS,EAAE,KAAK;QAChB,QAAQ,EAAE,KAAK;KAChB;CACF,CAAC;;;;;;;;;;;;;ACTF;AAAA;AAAA;AAAA;AAA8C;AACK;AAG5C,MAAM,8BAA8B;IAEzC,mCAAmC;IACnC,SAAS,CAAC,OAAyB,EAAE,IAAiB;QAEpD,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAC9B,4DAAK,CAAC,CAAC,CAAC,EACR,iEAAU,CAAC,CAAC,KAAwB,EAAE,EAAE;YACtC,IAAI,KAAK,CAAC,MAAM,KAAK,GAAG,EAAE;gBACxB,gBAAgB;aACjB;iBAAM;gBACL,OAAO,uDAAU,CAAC,KAAK,CAAC,CAAC;aAC1B;QACH,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;CACF;;;;;;;;;;;;;ACzBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAG8B;AAGgB;AACU;AACoB;AAED;AAG3E,yFAAyF;AACzF,4FAA4F;AAC5F,yFAAyF;AACzF,0FAA0F;AAE1F,8FAA8F;AAC9F,+FAA+F;AAC/F,uFAAuF;AACvF,sGAAsG;AAG/F,MAAM,sBAAsB;IAEjC,YAAoB,KAAkC,EAAU,mBAAwC;QAApF,UAAK,GAAL,KAAK,CAA6B;QAAU,wBAAmB,GAAnB,mBAAmB,CAAqB;IAAI,CAAC;IAE7G,mCAAmC;IACnC,SAAS,CAAC,OAAyB,EAAE,IAAiB;QAEpD,IAAI,OAAO,YAAY,gEAAW,EAAE;YAClC,OAAO,CAAC,GAAG,CAAC,qDAAqD,CAAC,CAAC;YACnE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,kFAAwC,EAAE,CAAC,CAAC;SACrE;QAED,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAC9B,4DAAK,CAAC,CAAC,CAAC;QACR,mCAAmC;QACnC,0DAAG,CAAC,CAAC,KAAqB,EAAE,EAAE;YAE5B,IAAI,KAAK,YAAY,iEAAY,EAAE;gBACjC,OAAO,CAAC,GAAG,CAAC,2DAA2D,CAAC,CAAC;gBACzE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,iFAAuC,EAAE,CAAC,CAAC;aACpE;QACH,CAAC,CAAC,EACF,iEAAU,CAAC,CAAC,KAAwB,EAAE,EAAE;YACtC,OAAO,CAAC,GAAG,CAAC,gEAAgE,CAAC,CAAC;YAC9E,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,iFAAuC,EAAE,CAAC,CAAC;YACnE,IAAI,YAAY,GAAG,EAAE,CAAC;YACtB,IAAI,KAAK,CAAC,KAAK,YAAY,UAAU,EAAE;gBACrC,wEAAwE;gBACxE,YAAY,GAAG,UAAU,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;gBAC/C,IAAI,CAAC,mBAAmB,CAAC,SAAS,CAAC,qBAAqB,CAAC,CAAC;aAC3D;iBAAM;gBACL,+CAA+C;gBAC/C,sDAAsD;gBACtD,6DAA6D;gBAC7D,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,uFAAgC,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;gBAEhF,YAAY,GAAG,eAAe,KAAK,CAAC,MAAM,cAAc,KAAK,CAAC,OAAO,EAAE,CAAC;aACzE;YACD,OAAO,uDAAU,CAAC,KAAK,CAAC,CAAC;QAC3B,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;CACF;;;;;;;;;;;;;;;;;AC7DM,MAAM,aAAa;IAExB,gBAAgB,CAAC;IAEjB,QAAQ,CAAC,GAAU;QACjB,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;QAC5B,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;QAC9B,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC;IAE9B,CAAC;IAEO,iBAAiB,CAAC,GAAU;QAClC,oCAAoC;QACpC,MAAM,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC;IAC3B,CAAC;IAGO,mBAAmB,CAAC,GAAU;QACpC,sCAAsC;QACtC,MAAM,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC;IAC3B,CAAC;IAEO,iBAAiB,CAAC,GAAU;QAClC,6CAA6C;QAC7C,MAAM,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC;IAC3B,CAAC;;;;;;;;;;;;;;;;;;;;;ACxBI,MAAM,mBAAmB;IAE9B,YAAoB,QAAqB;QAArB,aAAQ,GAAR,QAAQ,CAAa;IAAI,CAAC;IAE9C,WAAW,CAAC,OAAe;QACzB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC;IAC3F,CAAC;IAED,SAAS,CAAC,OAAe;QACvB,kDAAkD;QAClD,4DAA4D;QAC5D,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC;IACxF,CAAC;;;;;;;;;;;;;;;ACMH;AAAA;AAAO,MAAM,eAAe;CAAI;;;;;;;;;;;;;ACpBhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+D;AACe;AACT;AACM;AACE;WAO3E,CAAC,SAA4B,EAAE,EAAE;IAC/B,OAAO,SAAS,CAAC;AACnB,CAAC;AAPI,MAAM,eAAe,GAGxB,kEAAc,CAChB,kFAAkC,KAInC,CAAC;WASA,CAAC,iBAA0B,KAAK,EAAE,oBAA6B,KAAK,EAAE,yBAAkC,KAAK,EAAE,EAAE;IAC/G,OAAO,cAAc,IAAI,iBAAiB,IAAI,sBAAsB,CAAC;AACvE,CAAC;AATI,MAAM,eAAe,GAGxB,kEAAc,CAChB,kFAAmC,EACnC,wFAAyC,EACzC,6FAAmD,KAIpD,CAAC;WASA,CAAC,gBAAyB,KAAK,EAAE,mBAA4B,KAAK,EAAE,wBAAiC,KAAK,EAAE,EAAE;IAC5G,OAAO,aAAa,IAAI,gBAAgB,IAAI,qBAAqB,CAAC;AACpE,CAAC;AATI,MAAM,cAAc,GAGvB,kEAAc,CAChB,iFAAkC,EAClC,uFAAwC,EACxC,4FAAkD,KAInD,CAAC;;;;;;;;;;;;;;ACNF;AAAA;AAAO,MAAM,YAAY;CAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qGCpC7B;;;gZAAwB,GAArB,uDAAoB,IACnB,sHAAI,qFAAQ,MAGhB;;;2oBAAwE,GAAhE,uDAAwB,GAAhC,kXAAwE,iJAA0B,0FAAa,MAAI,6EAAQ,MAE3H,wTAI6B,YAA3B;;wBAA0B;MAJ5B,gnBAI6B,GAH3B,sLAA6B,KAI7B,8IAA0B,kFAAK,MAAI,uFAErC,MACA,6SAG6B,YAA3B;;wBAA0B;MAH5B,ulBAG6B,IAC3B,8IAA0B,kFAAK,MAAI,0FAErC,MACA,6SAGqB,YAAnB;;wBAAkB;MAHpB,ulBAGqB,IACnB,8IAA0B,2FAAc,MAAI,8EAE9C,mDA3BG,iCAAoB,GAAvB,YAAwB,EAArB,SAAoB,GAIf,qCAAwB,GAAhC,YAAwE,EAAhE,SAAwB,GAG9B,uJAA6B,UAD/B,aAI6B,EAH3B,SAA6B,2BAP/B,oMAAwB,GAIxB,iPAAwE,GAExE,oPAI6B,GAI7B,sPAG6B,GAI7B,wPAGqB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnBrB;AAAA;AAAA;AAAA;AAAA;AAAiE;AACI;AACc;AAS5E,MAAM,eAAe;IAI1B,YAAoB,KAAkC,EAAU,IAAgB;QAA5D,UAAK,GAAL,KAAK,CAA6B;QAAU,SAAI,GAAJ,IAAI,CAAY;IAAI,CAAC;IAErF,QAAQ;QACN,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAC5B,6EAA8B,CAC/B,CAAC;IACJ,CAAC;IAED,MAAM;QACJ,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,+EAAgC,EAAE,CAAC,CAAC;IAC9D,CAAC;IAED,cAAc;QACZ,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,gGAA+C,EAAE,CAAC,CAAC;IAC7E,CAAC;IAED,cAAc;QACZ,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;IACnC,CAAC;CAEF;;;;;;;;;;;;;ACzBD;AAAA;AAAO,MAAM,YAAY;CAAI;;;;;;;;;;;;;ACf7B;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAIU;;;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,uBAAgB,CAAC,6EAAU;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HttpErrorComponent } from './routes/http-error/http-error.component';\nimport { LoginComponent } from './routes/login/login.component';\nimport { ProductListComponent } from './routes/products/product-list/product-list.component';\n\nconst routes: Routes = [\n  { path: '', component: LoginComponent },\n  { path: 'http-error', component: HttpErrorComponent },\n  { path: 'product-list', component: ProductListComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","<crud-seed-top-bar></crud-seed-top-bar>\n<crud-seed-loading></crud-seed-loading>\n\n<div>\n  <router-outlet></router-outlet>\n</div>\n\n<!--\nCopyright Google LLC. All Rights Reserved.\nUse of this source code is governed by an MIT-style license that\ncan be found in the LICENSE file at http://angular.io/license\n-->\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport * as HttpErrorSelectors from './routes/http-error/slice/selectors';\nimport * as LoginSelectors from './routes/login/slice/selectors';\nimport * as RootStoreState from './shared/root-store/root-state';\nimport { User } from './shared/user.interface';\n\n@Component({\n  selector: 'crud-seed-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit, OnDestroy {\n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  constructor(private store: Store<RootStoreState.State>, private router: Router) { }\n\n  // tslint:disable-next-line: typedef\n  title = 'CRUDSeed: Products CRUD';\n\n  ngOnInit(): void {\n    this.store.select(\n      HttpErrorSelectors.selectHttpError\n    ).pipe(takeUntil(this.destroy$))\n      .subscribe((httpError: HttpErrorResponse) => {\n        if (httpError) {\n          this.router.navigate(['/http-error']);\n        }\n      });\n\n    this.store.select(\n      LoginSelectors.selectLoginUser\n    ).pipe(takeUntil(this.destroy$))\n      .subscribe((user: User) => {\n        if (!user) {\n          this.router.navigate(['/']);\n          console.log('no user');\n        } else {\n          this.router.navigate(['/product-list']);\n        }\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\nimport { SharedModule } from './shared/shared.module';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    SharedModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","<div class=\"http-error-container\">\n  <mat-card class=\"example-card\" class=\"mat-elevation-z4\">\n    <mat-card-header>\n      <mat-card-title>HTTP Error</mat-card-title>\n      <mat-card-subtitle>(contact your adminstrator)</mat-card-subtitle>\n    </mat-card-header>\n\n    <mat-card-content>\n      <p><i class=\"material-icons\">error</i> {{httpErrorMessage}}</p>\n    </mat-card-content>\n    <mat-card-actions>\n      <div class=\"logout-button\">\n        <button\n          mat-stroked-button\n          color=\"primary\"\n          (click)=\"logout()\">\n          Logout\n        </button>\n      </div>\n    </mat-card-actions>\n  </mat-card>\n</div>\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport * as LoginActions from '../../routes/login/slice/actions';\nimport * as RootStoreState from '../../shared/root-store/root-state';\nimport * as HttpErrorSelectors from './slice/selectors';\n\n@Component({\n  selector: 'crud-seed-http-error',\n  templateUrl: './http-error.component.html',\n  styleUrls: ['./http-error.component.scss']\n})\nexport class HttpErrorComponent implements OnInit, OnDestroy {\n\n  destroy$: Subject<boolean> = new Subject<boolean>();\n  httpError: HttpErrorResponse;\n  // tslint:disable-next-line: no-inferrable-types\n  httpErrorMessage: string = 'please logout first';\n\n  constructor(private store: Store<RootStoreState.State>, private router: Router) { }\n\n  ngOnInit(): void {\n    this.store.select(\n      HttpErrorSelectors.selectHttpError\n    ).pipe(takeUntil(this.destroy$))\n      .subscribe((httpError: HttpErrorResponse) => {\n        if (httpError) {\n          console.log(httpError);\n          this.httpError = httpError;\n          this.httpErrorMessage = httpError.message;\n        }\n      });\n  }\n\n  logout(): void {\n    this.store.dispatch(new LoginActions.LogoutRequestAction());\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AppRoutingModule } from 'src/app/app-routing.module';\nimport { AppMaterialModule } from 'src/app/shared/app-material.module';\nimport { HttpErrorComponent } from './http-error.component';\n\n@NgModule({\n  declarations: [HttpErrorComponent],\n  exports: [HttpErrorComponent],\n  imports: [\n    CommonModule,\n    AppRoutingModule,\n    AppMaterialModule\n  ]\n})\nexport class HttpErrorModule { }\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { Action } from '@ngrx/store';\n\nexport enum ActionTypes {\n    HTTP_ERROR = '[My Feature] HTTP Error',\n    HTTP_ERROR_CLEAR = '[My Feature] HTTP Error Clear'\n}\n\nexport class HttpErrorAction implements Action {\n    readonly type: ActionTypes.HTTP_ERROR = ActionTypes.HTTP_ERROR;\n    constructor(public payload: { httpError: HttpErrorResponse }) { }\n}\n\nexport class HttpErrorClearAction implements Action {\n  readonly type: ActionTypes.HTTP_ERROR_CLEAR = ActionTypes.HTTP_ERROR_CLEAR;\n}\n\nexport type Actions =\n    | HttpErrorAction\n    | HttpErrorClearAction;\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { featureReducer } from './reducer';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    StoreModule.forFeature('httpErrorFeature', featureReducer)\n  ]\n})\nexport class HttpErrorSliceModule { }\n","import { Actions, ActionTypes } from './actions';\nimport { initialState, State } from './state';\n\nexport function featureReducer(state: State = initialState, action: Actions): State {\n  switch (action.type) {\n    case ActionTypes.HTTP_ERROR:\n      return {\n        ...state,\n        httpError: action.payload.httpError\n      };\n    case ActionTypes.HTTP_ERROR_CLEAR:\n      return {\n        ...state,\n        ...initialState\n      };\n    default: {\n      return state;\n    }\n  }\n}\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector\n} from '@ngrx/store';\n\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { State } from './state';\n\nconst getHttpError = (state: State): HttpErrorResponse => state.httpError;\n\nexport const selectHttpErrorState: MemoizedSelector<\n  object,\n  State\n> = createFeatureSelector<State>('httpErrorFeature');\n\nexport const selectHttpError: MemoizedSelector<\n  object,\n  HttpErrorResponse\n> = createSelector(\n  selectHttpErrorState,\n  getHttpError\n);\n","import { HttpErrorResponse } from '@angular/common/http';\n\n\nexport interface State {\n  httpError: HttpErrorResponse | null;\n}\n\nexport const initialState: State = {\n  httpError: null\n};\n","<form [formGroup]=\"loginForm\" class=\"login-form\">\n  <div>\n    <mat-form-field>\n      <!-- <mat-label>username</mat-label> -->\n      <input matInput placeholder=\"(username)\" formControlName=\"uid\">\n      <mat-hint>(uid = '{{loginFake.UID}}')</mat-hint>\n      <mat-error>(uid = '{{loginFake.UID}}')</mat-error>\n    </mat-form-field>\n  </div>\n\n  <div>\n    <mat-form-field>\n      <!-- <mat-label>password</mat-label> -->\n      <input matInput placeholder=\"(password)\" formControlName=\"pwd\">\n      <mat-hint>(password = '{{loginFake.PWD}}')</mat-hint>\n      <mat-error>(password = '{{loginFake.PWD}}')</mat-error>\n    </mat-form-field>\n  </div>\n\n  <!-- since button's inside a 'form' it already seems to act as 'submit' so ngSubmit above not needed -->\n  <div class=\"login-button\">\n    <button\n      mat-stroked-button\n      color=\"primary\"\n      [disabled]=\"loginForm.invalid\"\n      (click)=\"submit($event)\">\n      <i class=\"material-icons\">account_circle</i>Login\n    </button>\n  </div>\n</form>\n","import { Component, EventEmitter, OnDestroy, OnInit, Output } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ENUM_LOGIN_FAKE } from '../login.fake';\nimport { Login } from '../login.interface';\nimport { LoginFormService } from './login-form.service';\n\n@Component({\n  selector: 'crud-seed-login-form',\n  templateUrl: './login-form.component.html',\n  styleUrls: ['./login-form.component.scss'],\n  providers: [LoginFormService] // this makes service bound it this components life-cycle (not a singleton!)\n})\nexport class LoginFormComponent implements OnInit, OnDestroy {\n\n  @Output() submitLogin: EventEmitter<Login> = new EventEmitter<Login>();\n\n  loginFake: typeof ENUM_LOGIN_FAKE = ENUM_LOGIN_FAKE;\n  loginForm: FormGroup = this.loginFormService.loginForm;\n\n  constructor(private loginFormService: LoginFormService) { }\n\n  ngOnInit(): void {\n    // always clear form on entry. this will clear form slice too\n    this.loginForm.reset();\n  }\n\n  submit(ev: Event): void {\n    // this.submitLogin.emit({ uid: ENUM_LOGIN_FAKE.UID, password: ENUM_LOGIN_FAKE.PWD });\n    this.submitLogin.emit(\n      { uid: this.loginFormService._loginForm.controls.uid.value,\n        password: this.loginFormService._loginForm.controls.pwd.value\n      }\n    );\n  }\n\n  ngOnDestroy(): void {\n\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AppMaterialModule } from 'src/app/shared/app-material.module';\nimport { LoginFormComponent } from './login-form.component';\n\n@NgModule({\n  declarations: [LoginFormComponent],\n  exports: [LoginFormComponent],\n  imports: [\n    CommonModule,\n    AppMaterialModule,\n    ReactiveFormsModule\n  ]\n})\nexport class LoginFormModule { }\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/internal/operators/takeUntil';\nimport { User } from 'src/app/shared/user.interface';\nimport * as RootStoreState from '../../../shared/root-store/root-state';\nimport { Login } from '../login.interface';\nimport * as LoginFormActions from './slice/actions';\nimport * as LoginFormSelectors from './slice/selectors';\n\n@Injectable()\nexport class LoginFormService implements OnDestroy {\n\n  destroy$: Subject<boolean> = new Subject<boolean>();\n\n  _loginForm: FormGroup = null;\n\n  get loginForm(): FormGroup {\n    return this._loginForm;\n  }\n\n  set loginForm(form: FormGroup) {\n    this._loginForm = form;\n  }\n\n  constructor(private fb: FormBuilder, private store: Store<RootStoreState.State>) {\n    this.initForm();\n    this.subscribeLoginFormStoreSlice();\n\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next(true);\n    this.destroy$.complete();\n  }\n\n  initForm(): void {\n\n    this.loginForm = this.fb.group({\n      uid: ['', Validators.required],\n      pwd: ['', Validators.required]\n    });\n\n    this.loginForm.valueChanges\n      .pipe(\n        takeUntil(this.destroy$),\n      )\n      .subscribe((login: Login) => {\n        // this merely updates fomr slice for later retrieval:\n        this.store.dispatch(new LoginFormActions.LoginFormUpdate({ login }));\n      });\n\n  }\n\n  subscribeLoginFormStoreSlice(): void {\n    this.store.select(\n      LoginFormSelectors.selectLogin\n    )\n      .pipe(\n        takeUntil(this.destroy$)\n      ).subscribe((user: User) => {\n        this.loginForm.patchValue(user, { emitEvent: false });\n      });\n\n  }\n\n}\n","import { Action } from '@ngrx/store';\n\nimport { Login } from '../../login.interface';\n\nexport enum ActionTypes {\n    LOGIN_FORM_UPDATE = '[My Feature] Login Form Update'\n}\n\nexport class LoginFormUpdate implements Action {\n    readonly type: ActionTypes.LOGIN_FORM_UPDATE = ActionTypes.LOGIN_FORM_UPDATE;\n    constructor(public payload: {login: Login }) { }\n}\n\nexport type Actions =\n    | LoginFormUpdate;\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { featureReducer } from './reducer';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    StoreModule.forFeature('loginFormFeature', featureReducer)\n  ]\n})\nexport class LoginFormSliceModule { }\n","import { Actions, ActionTypes } from './actions';\nimport { initialState, State } from './state';\n\n\nexport function featureReducer(state: State = initialState, action: Actions): State {\n  switch (action.type) {\n    case ActionTypes.LOGIN_FORM_UPDATE:\n      return {\n        ...state,\n        login: action.payload.login\n      };\n    default: {\n      return state;\n    }\n  }\n}\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector\n} from '@ngrx/store';\n\nimport { Login } from '../../../login/login.interface';\n\nimport { State } from './state';\n\nconst getLogin = (state: State): Login => state.login;\n\nexport const selectLoginState: MemoizedSelector<\n  object,\n  State\n> = createFeatureSelector<State>('loginFormFeature');\n\nexport const selectLogin: MemoizedSelector<\n  object,\n  Login\n> = createSelector(\n  selectLoginState,\n  getLogin\n);\n","import { Login } from '../../../login/login.interface';\n\nexport interface State {\n  login: Login | null;\n}\n\nexport const initialState: State = {\n  login: { uid: '', password: '' },\n};\n","<div class=\"login-container\">\n  <mat-card class=\"mat-elevation-z4\">\n    <mat-card-content>\n      <crud-seed-login-form (submitLogin)=\"requestLogin()\"></crud-seed-login-form>\n    </mat-card-content>\n  </mat-card>\n</div>\n\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport * as RootStoreState from '../../shared/root-store/root-state';\nimport * as LoginActions from '../login/slice/actions';\n\n@Component({\n  selector: 'crud-seed-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit, OnDestroy {\n\n  constructor(private store: Store<RootStoreState.State>) { }\n\n  ngOnInit(): void {\n  }\n\n  requestLogin(): void {\n    this.store.dispatch(new LoginActions.LoginRequestAction());\n  }\n\n  ngOnDestroy(): void {\n  }\n\n}\n","export enum ENUM_LOGIN_FAKE {\n  UID = 'moadeli',\n  PWD = '1234'\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AppRoutingModule } from 'src/app/app-routing.module';\nimport { AppMaterialModule } from 'src/app/shared/app-material.module';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  declarations: [LoginComponent],\n  exports: [LoginComponent],\n  imports: [\n    CommonModule,\n    LoginFormModule,\n    AppRoutingModule,\n    AppMaterialModule\n  ]\n})\nexport class LoginModule { }\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { delay, map } from 'rxjs/operators';\nimport { User } from '../../shared/user.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  constructor(private http: HttpClient) { }\n\n  login(uid: string, password: string): Observable<User> {\n\n    // return of({ uid, userName: ENUM_LOGIN_FAKE.UID, timeLoggedIn: ENUM_LOGIN_FAKE.PWD })\n    //   .pipe(\n    //     delay(2000) // simulate http api delay (with global state swirl)\n    //   );\n\n    // return of({ uid, userName: uid, timeLoggedIn: '3773' })\n    //   .pipe(\n    //     delay(2000) // simulate http api delay (with global state swirl)\n    //   );\n\n    return this.http.get('http://localhost:3000/api/login')\n      // tslint:disable-next-line: no-any\n      .pipe(map( (res: any) => res.data));\n  }\n\n  logout(): Observable<User> {\n\n    return of({})\n      .pipe(\n        delay(2000) // simulate http api delay (with global state swirl)\n                    // possibky cleanup local storage\n      );\n  }\n}\n\n","import { Action } from '@ngrx/store';\nimport { User } from '../../../shared/user.interface';\n\nexport enum ActionTypes {\n    LOGIN_REQUEST = '[My Feature] Login Request',\n    LOGIN_FAILURE = '[My Feature] Login Failure',\n    LOGIN_SUCCESS = '[My Feature] Login Success',\n    LOGOUT_REQUEST = '[My Feature] Logout Request',\n    LOGOUT_SUCCESS = '[My Feature] Logout Success',\n    LOGOUT_FAILURE = '[My Feature] Logout Failure'\n}\n\nexport class LoginRequestAction implements Action {\n    readonly type: ActionTypes.LOGIN_REQUEST = ActionTypes.LOGIN_REQUEST;\n}\n\nexport class LoginFailureAction implements Action {\n    readonly type: ActionTypes.LOGIN_FAILURE = ActionTypes.LOGIN_FAILURE;\n    constructor(public payload: { appHttpError: string }) { }\n}\n\nexport class LoginSuccessAction implements Action {\n    readonly type: ActionTypes.LOGIN_SUCCESS = ActionTypes.LOGIN_SUCCESS;\n    constructor(public payload: { user: User }) { }\n}\n\nexport class LogoutRequestAction implements Action {\n  readonly type: ActionTypes.LOGOUT_REQUEST = ActionTypes.LOGOUT_REQUEST;\n}\n\nexport class LogoutSuccessAction implements Action {\n  readonly type: ActionTypes.LOGOUT_SUCCESS = ActionTypes.LOGOUT_SUCCESS;\n}\n\nexport class LogoutFailureAction implements Action {\n  readonly type: ActionTypes.LOGOUT_FAILURE = ActionTypes.LOGOUT_FAILURE;\n  constructor(public payload: { appHttpError: string }) { }\n}\n\nexport type Actions =\n    | LoginRequestAction\n    | LoginFailureAction\n    | LoginSuccessAction\n    | LogoutRequestAction\n    | LogoutSuccessAction\n    | LogoutFailureAction;\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, switchMap, tap, withLatestFrom } from 'rxjs/operators';\nimport * as RootStoreState from '../../../shared/root-store/root-state';\nimport * as LoginFormSelectors from '../../login/login-form/slice/selectors';\nimport { LoginService } from '../login.service';\nimport * as featureActions from './actions';\n\n@Injectable()\nexport class LoginEffects {\n  constructor(private loginService: LoginService, private actions$: Actions, private store: Store<RootStoreState.State>) { }\n\n  @Effect()\n  loginRequestEffect$: Observable<Action> = this.actions$.pipe(\n    ofType<featureActions.LoginRequestAction>(\n      featureActions.ActionTypes.LOGIN_REQUEST\n    ),\n    withLatestFrom(this.store.select(\n      LoginFormSelectors.selectLogin\n    )),\n    switchMap(([, login]) =>\n      this.loginService\n        .login(login.uid, login.password)\n        .pipe(\n          tap( x => {\n            console.log(x);\n          }),\n          map(\n            user =>\n              new featureActions.LoginSuccessAction({\n                user\n              })\n          )\n        )\n    )\n  );\n\n  @Effect()\n  logoutRequestEffect$: Observable<Action> = this.actions$.pipe(\n    ofType<featureActions.LogoutRequestAction>(\n      featureActions.ActionTypes.LOGOUT_REQUEST\n    ),\n    switchMap(() =>\n      this.loginService\n        .logout()\n        .pipe(\n          map(\n            () =>\n              new featureActions.LogoutSuccessAction()\n          )\n        )\n    )\n  );\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { LoginEffects } from './effects';\nimport { featureReducer } from './reducer';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    StoreModule.forFeature('loginFeature', featureReducer),\n    EffectsModule.forFeature([LoginEffects])\n  ],\n  providers: [LoginEffects]\n})\nexport class LoginSliceModule { }\n","import { Actions, ActionTypes } from './actions';\nimport { initialState, State } from './state';\n\nexport function featureReducer(state: State = initialState, action: Actions): State {\n  switch (action.type) {\n    case ActionTypes.LOGIN_REQUEST:\n      return {\n        ...state,\n        appHttpLoading: {\n          isLoading: true,\n          isLoaded: false\n        }\n      };\n    case ActionTypes.LOGIN_SUCCESS:\n      return {\n        ...state,\n        user: action.payload.user,\n        appHttpLoading: {\n          isLoading: false,\n          isLoaded: true\n        }\n      };\n    case ActionTypes.LOGIN_FAILURE:\n      return {\n        ...state,\n        appHttpLoading: {\n          isLoading: false,\n          isLoaded: false\n        }\n      };\n    case ActionTypes.LOGOUT_REQUEST:\n      return {\n        ...state,\n        user: null,\n        appHttpLoading: {\n          isLoading: true,\n          isLoaded: false\n        }\n      };\n    case ActionTypes.LOGOUT_FAILURE:\n      return {\n        ...state,\n        appHttpLoading: {\n          isLoading: false,\n          isLoaded: false\n        }\n      };\n    case ActionTypes.LOGOUT_SUCCESS:\n      return {\n        ...state,\n        ...initialState\n      };\n    default: {\n      return state;\n    }\n  }\n}\n","import {\n    createFeatureSelector,\n    createSelector,\n    MemoizedSelector\n} from '@ngrx/store';\n\nimport { User } from '../../../shared/user.interface';\n\nimport { State } from './state';\n\nconst getIsLoading = (state: State): boolean => state.appHttpLoading.isLoading;\n\nconst getIsLoaded = (state: State): boolean => state.appHttpLoading.isLoaded;\n\nconst getUser = (state: State): User => {\n  return state.user;\n};\n\nexport const selectLoginState: MemoizedSelector<\n    object,\n    State\n> = createFeatureSelector<State>('loginFeature');\n\nexport const selectLoginIsLoading: MemoizedSelector<\n    object,\n    boolean\n> = createSelector(\n    selectLoginState,\n    getIsLoading\n);\n\nexport const selectLoginIsLoaded: MemoizedSelector<\n    object,\n    boolean\n> = createSelector(\n    selectLoginState,\n    getIsLoaded\n);\n\nexport const selectLoginUser: MemoizedSelector<\n    object,\n    User\n> = createSelector(\n    selectLoginState,\n    getUser\n);\n","import { AppHttpLoading } from 'src/app/shared/app-http-loading/app-http-loading.interface';\nimport { User } from '../../../shared/user.interface';\n\nexport interface State {\n  user: User | null;\n  appHttpLoading: AppHttpLoading;\n}\n\nexport const initialState: State = {\n  user: null,\n  appHttpLoading: {\n    isLoading: false,\n    isLoaded: false\n  }\n};\n\n","<div class=\"products-container\">\n  <h2>Products</h2>\n  <div *ngFor=\"let product of products$ | async\">\n\n    <h3>\n        {{ product.id }}&nbsp;&nbsp;{{ product.name }}&nbsp;,&nbsp;{{product.date}}&nbsp;,&nbsp;{{product.hHMmSs}}\n    </h3>\n\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport * as RootStoreState from '../../../shared/root-store/root-state';\nimport { Product } from '../product.interface';\nimport { ProductsService } from '../products.service';\nimport * as ProductsActions from '../slice/actions';\nimport * as ProductsSelectors from '../slice/selectors';\n\n@Component({\n  selector: 'crud-seed-product-list',\n  templateUrl: './product-list.component.html',\n  styleUrls: ['./product-list.component.scss']\n})\nexport class ProductListComponent implements OnInit {\n\n  get products$(): Observable<Array<Product>> {\n    return this.store.select(\n      ProductsSelectors.selectProducts\n    );\n  }\n\n  constructor(private productsService: ProductsService, private store: Store<RootStoreState.State>) { }\n\n  ngOnInit(): void {\n    this.store.dispatch(new ProductsActions.ProductsRequestAction());\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ProductListComponent } from './product-list/product-list.component';\nimport { ProductsService } from './products.service';\n\n@NgModule({\n  declarations: [ProductListComponent],\n  imports: [\n    CommonModule\n  ],\n  providers: [ProductsService]\n})\nexport class ProductsModule { }\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { delay, map } from 'rxjs/operators';\nimport { Product } from './product.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductsService {\n\n  constructor(private http: HttpClient) { }\n\n  products(): Observable<Array<Product>> {\n\n    return this.http.get('http://localhost:3000/api/products')\n      // tslint:disable-next-line: no-any\n      .pipe(map( (res: any) => {\n        return res.data;\n      }));\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { Product } from '../product.interface';\n\nexport enum ActionTypes {\n    PRODUCTS_REQUEST = '[My Feature] Products Request',\n    PRODUCTS_REQUEST_FAILURE = '[My Feature] Products Request Failure',\n    PRODUCTS_REQUEST_SUCCESS = '[My Feature] Products Request Success'\n}\n\nexport class ProductsRequestAction implements Action {\n    readonly type: ActionTypes.PRODUCTS_REQUEST = ActionTypes.PRODUCTS_REQUEST;\n}\n\nexport class ProductsRequestFailureAction implements Action {\n    readonly type: ActionTypes.PRODUCTS_REQUEST_FAILURE = ActionTypes.PRODUCTS_REQUEST_FAILURE;\n    constructor(public payload: { appHttpError: string }) { }\n}\n\nexport class ProductsRequestSuccessAction implements Action {\n    readonly type: ActionTypes.PRODUCTS_REQUEST_SUCCESS = ActionTypes.PRODUCTS_REQUEST_SUCCESS;\n    constructor(public payload: { products: Array<Product> }) { }\n}\n\nexport type Actions =\n    | ProductsRequestAction\n    | ProductsRequestFailureAction\n    | ProductsRequestSuccessAction;\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { ProductsService } from '../products.service';\nimport * as featureActions from './actions';\n\n@Injectable()\nexport class ProductsEffects {\n  constructor(private productsService: ProductsService, private actions$: Actions) { }\n\n  @Effect()\n  productsRequestEffect$: Observable<Action> = this.actions$.pipe(\n    ofType<featureActions.ProductsRequestAction>(\n      featureActions.ActionTypes.PRODUCTS_REQUEST\n    ),\n    switchMap(() =>\n      this.productsService\n        .products()\n        .pipe(\n          map(\n            products =>\n              new featureActions.ProductsRequestSuccessAction({\n                products\n              })\n          )\n        )\n    )\n  );\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { ProductsEffects } from './effects';\nimport { featureReducer } from './reducer';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    StoreModule.forFeature('productsFeature', featureReducer),\n    EffectsModule.forFeature([ProductsEffects])\n  ],\n  providers: [ProductsEffects]\n})\nexport class ProductsSliceModule { }\n\n","import { Actions, ActionTypes } from './actions';\nimport { initialState, State } from './state';\n\nexport function featureReducer(state: State = initialState, action: Actions): State {\n  switch (action.type) {\n    case ActionTypes.PRODUCTS_REQUEST:\n      return {\n        ...state,\n        appHttpLoading: {\n          isLoading: true,\n          isLoaded: false\n        }\n      };\n    case ActionTypes.PRODUCTS_REQUEST_SUCCESS:\n      return {\n        ...state,\n        products: action.payload.products,\n        appHttpLoading: {\n          isLoading: false,\n          isLoaded: true\n        }\n      };\n    case ActionTypes.PRODUCTS_REQUEST_FAILURE:\n      return {\n        ...state,\n        appHttpLoading: {\n          isLoading: false,\n          isLoaded: false\n        }\n      };\n    default: {\n      return state;\n    }\n  }\n}\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector\n} from '@ngrx/store';\n\nimport { Product } from '../product.interface';\n\nimport { State } from './state';\n\nconst getIsLoading = (state: State): boolean => state.appHttpLoading.isLoading;\n\nconst getIsLoaded = (state: State): boolean => state.appHttpLoading.isLoaded;\n\nconst getProducts = (state: State): Array<Product> => state.products;\n\nexport const selectProductsState: MemoizedSelector<\n  object,\n  State\n> = createFeatureSelector<State>('productsFeature');\n\nexport const selectProductsIsLoading: MemoizedSelector<\n  object,\n  boolean\n> = createSelector(\n  selectProductsState,\n  getIsLoading\n);\n\nexport const selectProductsIsLoaded: MemoizedSelector<\n  object,\n  boolean\n> = createSelector(\n  selectProductsState,\n  getIsLoaded\n);\n\nexport const selectProducts: MemoizedSelector<\n  object,\n  Array<Product>\n> = createSelector(\n  selectProductsState,\n  getProducts\n);\n","import { AppHttpLoading } from 'src/app/shared/app-http-loading/app-http-loading.interface';\nimport { Product } from '../product.interface';\n\nexport interface State {\n  products: Array<Product> | null;\n  appHttpLoading: AppHttpLoading;\n}\n\nexport const initialState: State = {\n  products: null,\n  appHttpLoading: {\n    isLoading: false,\n    isLoaded: false\n  }\n};\n","<div class=\"progress-overlay\" [hidden]=\"(isLoadingJoined$ | async) === false\">\n  <div class=\"progress-loader\">\n\n    <mat-spinner style=\"margin:0 auto;\"></mat-spinner>\n\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { combineLatest } from 'rxjs';\nimport { Observable } from 'rxjs/internal/Observable';\nimport { map } from 'rxjs/internal/operators/map';\nimport * as RootStoreState from '../../shared/root-store/root-state';\nimport * as GlobalSelectors from '../../shared/root-store/selectors';\nimport * as AppHttpLoadingSelectors from '../app-http-loading/slice/selectors';\n\n@Component({\n  selector: 'crud-seed-loading',\n  templateUrl: './app-http-loading.component.html',\n  styleUrls: ['./app-http-loading.component.scss']\n})\nexport class AppHttpLoadingComponent implements OnInit {\n\n  isLoading$: Observable<boolean>;\n  isLoadingJoined$: Observable<boolean>;\n\n  constructor(private store: Store<RootStoreState.State>) { }\n\n  // VERY IMPORTANT!!!\n  // below the ONLY needed slice/observable stack is the\n  // AppHttpLoadingSelectors.selectIsLoading which is handled\n  // in the server interceptor\n  // The global loading GlobalSelectors.selectIsLoading\n  // is not need since it is redundantly added to each and every\n  // slice which is not DRY. It is tmp'rarily used to merely\n  // simulate an http call via a delay timer. When real http\n  // api calls are made that entire infractructure slice\n  // can be removed.\n\n  ngOnInit(): void {\n    // this.isLoading$ =\n    // this.store.select(\n    //   GlobalSelectors.selectIsLoading\n    // );\n    this.isLoading$ =\n      this.store.select(\n        AppHttpLoadingSelectors.selectIsLoading\n      );\n\n    this.isLoadingJoined$ = combineLatest([\n      this.store.select(\n        AppHttpLoadingSelectors.selectIsLoading\n      ),\n      this.store.select(\n        GlobalSelectors.selectIsLoading\n      )]\n    ).pipe(map(([appLoading, globalRedundantLoading]: [boolean, boolean]) => {\n      return appLoading;\n    }));\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AppMaterialModule } from '../app-material.module';\n\nimport { AppHttpLoadingComponent } from './app-http-loading.component';\n\n@NgModule({\n  declarations: [AppHttpLoadingComponent],\n  exports: [AppHttpLoadingComponent],\n  imports: [\n    CommonModule,\n    AppMaterialModule\n  ]\n})\nexport class AppHttpLoadingModule { }\n","import { Action } from '@ngrx/store';\n\n\nexport enum ActionTypes {\n    START_LOADING = '[My Feature] Start Loading',\n    STOP_LOADING = '[My Feature] Stop Loading'\n}\n\nexport class StartLoadingAction implements Action {\n    readonly type: ActionTypes.START_LOADING = ActionTypes.START_LOADING;\n}\n\nexport class StopLoadingAction implements Action {\n    readonly type: ActionTypes.STOP_LOADING = ActionTypes.STOP_LOADING;\n}\n\n\nexport type Actions =\n    | StartLoadingAction\n    | StopLoadingAction;\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { featureReducer } from './reducer';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    StoreModule.forFeature('loadingFeature', featureReducer)\n  ]\n})\nexport class AppHttpLoadingSliceModule { }\n","import { Actions, ActionTypes } from './actions';\nimport { initialState, State } from './state';\n\nexport function featureReducer(state: State = initialState, action: Actions): State {\n  switch (action.type) {\n    case ActionTypes.START_LOADING:\n      return {\n        ...state,\n        appHttpLoading: {\n          isLoading: true,\n          isLoaded: false\n        }\n      };\n    case ActionTypes.STOP_LOADING:\n      return {\n        ...state,\n        appHttpLoading: {\n          isLoading: false,\n          isLoaded: true\n        }\n      };\n    default: {\n      return state;\n    }\n  }\n}\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector\n} from '@ngrx/store';\n\nimport { State } from './state';\n\nconst getIsLoading = (state: State): boolean => state.appHttpLoading.isLoading;\n\nconst getIsLoaded = (state: State): boolean => state.appHttpLoading.isLoaded;\n\nexport const selectLoadingState: MemoizedSelector<\n  object,\n  State\n> = createFeatureSelector<State>('loadingFeature');\n\nexport const selectIsLoading: MemoizedSelector<\n  object,\n  boolean\n> = createSelector(\n  selectLoadingState,\n  getIsLoading\n);\n\nexport const selectIsLoaded: MemoizedSelector<\n  object,\n  boolean\n> = createSelector(\n  selectLoadingState,\n  getIsLoaded\n);\n\n","import { AppHttpLoading } from 'src/app/shared/app-http-loading/app-http-loading.interface';\n\nexport interface State {\n  appHttpLoading: AppHttpLoading;\n}\n\nexport const initialState: State = {\n  appHttpLoading: {\n    isLoading: false,\n    isLoaded: false\n  }\n};\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    BrowserAnimationsModule,\n    MatInputModule,\n    MatProgressSpinnerModule,\n    MatFormFieldModule,\n    MatCardModule,\n    MatButtonModule,\n    MatSnackBarModule\n  ],\n  exports: [\n    BrowserAnimationsModule,\n    MatProgressSpinnerModule,\n    MatInputModule,\n    MatProgressSpinnerModule,\n    MatFormFieldModule,\n    MatCardModule,\n    MatButtonModule,\n    MatSnackBarModule\n  ]\n})\nexport class AppMaterialModule { }\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { ErrorHandler, Injectable } from '@angular/core';\nimport { LoggerService } from '../logger.service';\nimport { NotificationService } from '../notification.service';\nimport * as ErrorFunctions from './translate-errors';\n\n// One traditional way of handling errors in Angular is to provide an ErrorHandler class.\n// This class can be extended to create your own global error handler. This is also a useful\n// way to handle all errors that occur, but is mostly useful for tracking error logs. For\n// reference, you can check our earlier tutorial on how to use ErrorHandler in Angular 2+.\n\n// By implementing error handling in HttpClient or HttpInterceptor, you can work directly with\n// all HTTP requests in your application, providing the ability to transform the request, retry\n// it, and more. Therefore, ErrorHandler is useful for more generic error handling, but\n// HttpInterceptor provides a much more robust way to handle errors related to the server and network.\n\n// Handling errors with HttpClient\n@Injectable()\nexport class AngularErrorHandlerService implements ErrorHandler {\n\n  constructor(private loggingService: LoggerService, private notificationService: NotificationService) { }\n\n  message: string;\n  stackTrace: string;\n\n  handleError(error: HttpErrorResponse | Error): void {\n    console.log('in error handler custom error type is: ' + '\\n');\n    if (error instanceof HttpErrorResponse) {\n      console.log('httperrorresponse is def handled in interceptors');\n      this.message = ErrorFunctions.getServerMessage(error);\n      this.stackTrace = ErrorFunctions.getServerStack(error);\n    } else {\n      this.message = ErrorFunctions.getClientMessage(error);\n      this.stackTrace = ErrorFunctions.getClientStack(error);\n      this.notificationService.showError(this.message);\n    }\n\n    this.loggingService.logError(error as Error);\n\n  }\n}\n","import { HttpErrorResponse } from '@angular/common/http';\n\nexport function getClientMessage(error: Error): string {\n  if (!navigator.onLine) {\n    return 'No Internet Connection';\n  }\n  return error.message ? error.message : error.toString();\n}\n\nexport function getClientStack(error: Error): string {\n  return error.stack;\n}\n\nexport function getServerMessage(error: HttpErrorResponse): string {\n  return error.message;\n}\n\nexport function getServerStack(error: HttpErrorResponse): string {\n  // handle stack trace\n  return 'stack';\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule\n  ]\n})\nexport class FakeHttpErrorModule { }\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FakeHttpErrorService {\n\n  constructor(private http: HttpClient) { }\n\n  fake(): Observable<{}> {\n    return this.http.get('http://www.zhgdsfdsfsdf.com');\n  }\n}\n","import { Action } from '@ngrx/store';\n\nexport enum ActionTypes {\n    FAKE_HTTP_ERROR_REQUEST = '[My Feature] Fake Http Error Request',\n    FAKE_HTTP_ERROR_REQUEST_FAILURE = '[My Feature] Fake Http Error Request Failure',\n}\n\nexport class FakeHttpErrorRequestAction implements Action {\n    readonly type: ActionTypes.FAKE_HTTP_ERROR_REQUEST = ActionTypes.FAKE_HTTP_ERROR_REQUEST;\n}\n\nexport class FakeHttpErrorRequestFailureAction implements Action {\n  readonly type: ActionTypes.FAKE_HTTP_ERROR_REQUEST_FAILURE = ActionTypes.FAKE_HTTP_ERROR_REQUEST_FAILURE;\n}\n\n\nexport type Actions =\n    | FakeHttpErrorRequestAction\n    | FakeHttpErrorRequestFailureAction;\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { FakeHttpErrorService } from '../fake-http-error.service';\nimport * as featureActions from './actions';\n\n@Injectable()\nexport class FakeHttpErrorEffects {\n  constructor(private fakeHttpService: FakeHttpErrorService, private actions$: Actions) { }\n\n  @Effect()\n  fakeHttpErrorRequestEffect$: Observable<Action> = this.actions$.pipe(\n    ofType<featureActions.FakeHttpErrorRequestAction>(\n      featureActions.ActionTypes.FAKE_HTTP_ERROR_REQUEST\n    ),\n    switchMap(() =>\n      this.fakeHttpService\n        .fake()\n        .pipe(\n          map((x) => null),\n          catchError(err => of(new featureActions.FakeHttpErrorRequestFailureAction()))\n        )\n    )\n  );\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { FakeHttpErrorEffects } from './effects';\nimport { featureReducer } from './reducer';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    StoreModule.forFeature('fakeHttpErrorFeature', featureReducer),\n    EffectsModule.forFeature([FakeHttpErrorEffects])\n  ]\n})\nexport class FakeHttpErrorSliceModule { }\n","import { Actions, ActionTypes } from './actions';\nimport { initialState, State } from './state';\n\nexport function featureReducer(state: State = initialState, action: Actions): State {\n  switch (action.type) {\n    case ActionTypes.FAKE_HTTP_ERROR_REQUEST:\n      return {\n        ...state,\n        appHttpLoading: {\n          isLoading: true,\n          isLoaded: false\n        }\n      };\n    case ActionTypes.FAKE_HTTP_ERROR_REQUEST_FAILURE:\n      return {\n        ...state,\n        appHttpLoading: {\n          isLoading: false,\n          isLoaded: false\n        }\n      };\n    default: {\n      return state;\n    }\n  }\n}\n","import {\n  createFeatureSelector,\n  createSelector,\n  MemoizedSelector\n} from '@ngrx/store';\n\nimport { State } from './state';\n\nconst getIsLoading = (state: State): boolean => state.appHttpLoading.isLoading;\n\nconst getIsLoaded = (state: State): boolean => state.appHttpLoading.isLoaded;\n\n// tslint:disable-next-line: no-any\nconst getFakeData = (state: State): any => state.fakeData;\n\nexport const selectFakeHttpErrorState: MemoizedSelector<\n  object,\n  State\n> = createFeatureSelector<State>('fakeHttpErrorFeature');\n\nexport const selectFakeHttpErrorIsLoading: MemoizedSelector<\n  object,\n  boolean\n> = createSelector(\n  selectFakeHttpErrorState,\n  getIsLoading\n);\n\nexport const selectFakeHttpErrorIsLoaded: MemoizedSelector<\n  object,\n  boolean\n> = createSelector(\n  selectFakeHttpErrorState,\n  getIsLoaded\n);\n\nexport const selectFakeHttpError: MemoizedSelector<\n  object,\n  // tslint:disable-next-line: no-any\n  any\n> = createSelector(\n  selectFakeHttpErrorState,\n  getFakeData\n);\n","import { AppHttpLoading } from '../../app-http-loading/app-http-loading.interface';\n\nexport interface State {\n  // tslint:disable-next-line: no-any\n  fakeData: any;\n  appHttpLoading: AppHttpLoading;\n}\n\nexport const initialState: State = {\n  fakeData: null,\n  appHttpLoading: {\n    isLoading: false,\n    isLoaded: false\n  }\n};\n","import {\n  HttpErrorResponse, HttpEvent, HttpHandler,\n  HttpInterceptor, HttpRequest\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\n\n@Injectable()\nexport class AuthenticationErrorInterceptor implements HttpInterceptor {\n\n  // tslint:disable-next-line: no-any\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n    return next.handle(request).pipe(\n      retry(1),\n      catchError((error: HttpErrorResponse) => {\n        if (error.status === 401) {\n          // refresh token\n        } else {\n          return throwError(error);\n        }\n      })\n    );\n  }\n}\n","import {\n  HttpErrorResponse, HttpEvent, HttpHandler,\n  HttpInterceptor, HttpRequest, HttpResponse\n} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, retry, tap } from 'rxjs/operators';\nimport * as HttpErrorActions from 'src/app/routes/http-error/slice/actions';\nimport * as RootStoreState from '../../shared/root-store/root-state';\nimport * as AppHttpLoadingActions from '../app-http-loading/slice/actions';\nimport { NotificationService } from '../notification.service';\n\n// One traditional way of handling errors in Angular is to provide an ErrorHandler class.\n// This class can be extended to create your own global error handler. This is also a useful\n// way to handle all errors that occur, but is mostly useful for tracking error logs. For\n// reference, you can check our earlier tutorial on how to use ErrorHandler in Angular 2+.\n\n// By implementing error handling in HttpClient or HttpInterceptor, you can work directly with\n// all HTTP requests in your application, providing the ability to transform the request, retry\n// it, and more. Therefore, ErrorHandler is useful for more generic error handling, but\n// HttpInterceptor provides a much more robust way to handle errors related to the server and network.\n\n@Injectable()\nexport class ServerErrorInterceptor implements HttpInterceptor {\n\n  constructor(private store: Store<RootStoreState.State>, private notificationService: NotificationService) { }\n\n  // tslint:disable-next-line: no-any\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n    if (request instanceof HttpRequest) {\n      console.log('--------> http HttpRequest dispatch loading spinner');\n      this.store.dispatch(new AppHttpLoadingActions.StartLoadingAction());\n    }\n\n    return next.handle(request).pipe(\n      retry(1),\n      // tslint:disable-next-line: no-any\n      tap((event: HttpEvent<any>) => {\n\n        if (event instanceof HttpResponse) {\n          console.log('--------> http HttpResponse dispatch stop loading spinner');\n          this.store.dispatch(new AppHttpLoadingActions.StopLoadingAction());\n        }\n      }),\n      catchError((error: HttpErrorResponse) => {\n        console.log('--------> http HttpErrorResponse dispatch stop loading spinner');\n        this.store.dispatch(new AppHttpLoadingActions.StopLoadingAction());\n        let errorMessage = '';\n        if (error.error instanceof ErrorEvent) {\n          // A client-side htttp or network error occurred. Handle it accordingly.\n          errorMessage = `Error: ${error.error.message}`;\n          this.notificationService.showError('error.error.message');\n        } else {\n          // here an actual server response was received.\n          // The backend returned an unsuccessful response code.\n          // The response body may contain clues as to what went wrong,\n          this.store.dispatch(new HttpErrorActions.HttpErrorAction({ httpError: error }));\n\n          errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n        }\n        return throwError(error);\n      })\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoggerService {\n\n  constructor() { }\n\n  logError(err: Error): void {\n    this.logToLocalStorage(err);\n    this.logToSessionStorage(err);\n    this.logToRemoteLogger(err);\n\n  }\n\n  private logToLocalStorage(err: Error): void {\n    // here log proper localStorage keys\n    const _stack = err.stack;\n  }\n\n\n  private logToSessionStorage(err: Error): void {\n    // here log proper sessionStorage keys\n    const _stack = err.stack;\n  }\n\n  private logToRemoteLogger(err: Error): void {\n    // log remote tracker such as Slack or Sentry\n    const _stack = err.stack;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationService {\n\n  constructor(private snackBar: MatSnackBar) { }\n\n  showSuccess(message: string): void {\n    this.snackBar.open(message, null, { duration: 2500, panelClass: ['snackbar-no-error'] });\n  }\n\n  showError(message: string): void {\n    // The second parameter is the text in the button.\n    // In the third, we send in the css class for the snack bar.\n    this.snackBar.open(message, null, { duration: 2500, panelClass: ['snackbar-error'] });\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { HttpErrorSliceModule } from 'src/app/routes/http-error/slice/http-error-slice.module';\nimport { LoginFormSliceModule } from '../../routes/login/login-form/slice/login-form-slice.module';\nimport { LoginSliceModule } from '../../routes/login/slice/login-slice.module';\nimport { ProductsSliceModule } from '../../routes/products/slice/products-slice.module';\nimport { AppHttpLoadingSliceModule } from '../app-http-loading/slice/app-http-loading-slice.module';\nimport { FakeHttpErrorSliceModule } from '../fake-http-error/slice/fake-http-error-slice.module';\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    HttpErrorSliceModule,\n    LoginSliceModule,\n    LoginFormSliceModule,\n    ProductsSliceModule,\n    FakeHttpErrorSliceModule,\n    AppHttpLoadingSliceModule,\n    StoreModule.forRoot({}),\n    EffectsModule.forRoot([])\n  ]\n})\nexport class RootStoreModule { }\n","/*\n  TEMPORARY FILE. CAN BE REMOVED ONCE REAL HTTP IS ACTIVATED\n*/\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { createSelector, MemoizedSelector } from '@ngrx/store';\nimport * as HttpErrorSelectors from '../../routes/http-error/slice/selectors';\nimport * as LoginSelectors from '../../routes/login/slice/selectors';\nimport * as ProductsSelectors from '../../routes/products/slice/selectors';\nimport * as FakeHttpErrorSelectors from '../fake-http-error/slice/selectors';\n\nexport const selectHttpError: MemoizedSelector<\n  object,\n  HttpErrorResponse\n> = createSelector(\n  HttpErrorSelectors.selectHttpError,\n  (httpError: HttpErrorResponse) => {\n    return httpError;\n  }\n);\n\nexport const selectIsLoading: MemoizedSelector<\n  object,\n  boolean\n> = createSelector(\n  LoginSelectors.selectLoginIsLoading,\n  ProductsSelectors.selectProductsIsLoading,\n  FakeHttpErrorSelectors.selectFakeHttpErrorIsLoading,\n  (loginIsLoading: boolean = false, productsIsLoading: boolean = false, fakeHttpErrorIsLoading: boolean = false) => {\n    return loginIsLoading || productsIsLoading || fakeHttpErrorIsLoading;\n  }\n);\n\nexport const selectIsLoaded: MemoizedSelector<\n  object,\n  boolean\n> = createSelector(\n  LoginSelectors.selectLoginIsLoaded,\n  ProductsSelectors.selectProductsIsLoaded,\n  FakeHttpErrorSelectors.selectFakeHttpErrorIsLoaded,\n  (loginIsLoaded: boolean = false, productsIsLoaded: boolean = false, fakeHttpErrorIsLoaded: boolean = false) => {\n    return loginIsLoaded || productsIsLoaded || fakeHttpErrorIsLoaded;\n  }\n);\n\n\n","import { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http/http';\nimport { ErrorHandler, NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpErrorModule } from '../routes/http-error/http-error.module';\nimport { LoginModule } from '../routes/login/login.module';\nimport { ProductsModule } from '../routes/products/products.module';\nimport { AppHttpLoadingModule } from './app-http-loading/app-http-loading.module';\nimport { AppMaterialModule } from './app-material.module';\nimport { AngularErrorHandlerService } from './errors/angular-error-handler.service';\nimport { FakeHttpErrorModule } from './fake-http-error/fake-http-error.module';\nimport { AuthenticationErrorInterceptor } from './interceptors/authentication-error.interceptor';\nimport { ServerErrorInterceptor } from './interceptors/server-error.interceptor';\nimport { RootStoreModule } from './root-store/root-store.module';\nimport { TopBarModule } from './top-bar/top-bar.module';\n\n@NgModule({\n  exports: [TopBarModule, AppHttpLoadingModule],\n  imports: [\n    CommonModule,\n    HttpClientModule,\n    FormsModule,\n    ReactiveFormsModule,\n    AppMaterialModule,\n    FakeHttpErrorModule,\n    ProductsModule,\n    LoginModule,\n    HttpErrorModule,\n    RootStoreModule\n  ],\n  providers: [\n    { provide: ErrorHandler, useClass: AngularErrorHandlerService },\n    { provide: HTTP_INTERCEPTORS, useClass: ServerErrorInterceptor, multi: true },\n    { provide: HTTP_INTERCEPTORS, useClass: AuthenticationErrorInterceptor, multi: true }\n  ]\n})\nexport class SharedModule { }\n","<a [routerLink]=\"['/']\">\n    <h1>My Store</h1>\n</a>\n\n<button [routerLink]=\"['/cart']\" mat-raised-button class=\"top-bar-item\"><i class=\"material-icons\">shopping_cart</i>Checkout</button>\n\n<button\n  [disabled]=\"!(user$ | async)\"\n  mat-raised-button\n  class=\"http-error top-bar-item\"\n  (click)=\"causeHttpError()\">\n  <i class=\"material-icons\">error</i>\n  fake http error\n</button>\n<button\n  mat-raised-button\n  class=\"top-bar-item\"\n  (click)=\"causePureError()\">\n  <i class=\"material-icons\">error</i>\n  fake general error\n</button>\n<button\n  mat-raised-button\n  class=\"top-bar-item\"\n  (click)=\"logout()\">\n  <i class=\"material-icons\">account_circle</i>\n  Logout\n</button>\n\n","import { HttpClient } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\n\nimport { Observable } from 'rxjs';\nimport * as LoginActions from '../../routes/login/slice/actions';\nimport * as LoginSelectors from '../../routes/login/slice/selectors';\nimport * as FakeHttpErrorActions from '../../shared/fake-http-error/slice/actions';\nimport * as RootStoreState from '../../shared/root-store/root-state';\nimport { User } from '../user.interface';\n\n@Component({\n  selector: 'crud-seed-top-bar',\n  templateUrl: './top-bar.component.html',\n  styleUrls: ['./top-bar.component.scss']\n})\nexport class TopBarComponent implements OnInit {\n\n  user$: Observable<User>;\n\n  constructor(private store: Store<RootStoreState.State>, private http: HttpClient) { }\n\n  ngOnInit(): void {\n    this.user$ = this.store.select(\n      LoginSelectors.selectLoginUser\n    );\n  }\n\n  logout(): void {\n    this.store.dispatch(new LoginActions.LogoutRequestAction());\n  }\n\n  causeHttpError(): void {\n    this.store.dispatch(new FakeHttpErrorActions.FakeHttpErrorRequestAction());\n  }\n\n  causePureError(): void {\n    throw new Error('My pure Error');\n  }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AppRoutingModule } from 'src/app/app-routing.module';\nimport { AppMaterialModule } from '../app-material.module';\nimport { TopBarComponent } from './top-bar.component';\n\n@NgModule({\n  declarations: [TopBarComponent],\n  exports: [TopBarComponent],\n  imports: [\n    CommonModule,\n    AppRoutingModule,\n    AppMaterialModule\n  ]\n})\nexport class TopBarModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}